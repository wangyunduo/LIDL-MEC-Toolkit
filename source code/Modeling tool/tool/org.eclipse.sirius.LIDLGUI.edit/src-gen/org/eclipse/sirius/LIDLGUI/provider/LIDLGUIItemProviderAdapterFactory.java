/**
 */
package org.eclipse.sirius.LIDLGUI.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.sirius.LIDLGUI.util.LIDLGUIAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LIDLGUIItemProviderAdapterFactory extends LIDLGUIAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LIDLGUIItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.GUI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GUIItemProvider guiItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.GUI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGUIAdapter() {
		if (guiItemProvider == null) {
			guiItemProvider = new GUIItemProvider(this);
		}

		return guiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.BasicWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicWidgetItemProvider basicWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.BasicWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicWidgetAdapter() {
		if (basicWidgetItemProvider == null) {
			basicWidgetItemProvider = new BasicWidgetItemProvider(this);
		}

		return basicWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerItemProvider containerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerAdapter() {
		if (containerItemProvider == null) {
			containerItemProvider = new ContainerItemProvider(this);
		}

		return containerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Button} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ButtonItemProvider buttonItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Button}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createButtonAdapter() {
		if (buttonItemProvider == null) {
			buttonItemProvider = new ButtonItemProvider(this);
		}

		return buttonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Panel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PanelItemProvider panelItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Panel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPanelAdapter() {
		if (panelItemProvider == null) {
			panelItemProvider = new PanelItemProvider(this);
		}

		return panelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Indicator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndicatorItemProvider indicatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Indicator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndicatorAdapter() {
		if (indicatorItemProvider == null) {
			indicatorItemProvider = new IndicatorItemProvider(this);
		}

		return indicatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.RadioBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioBoxItemProvider radioBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.RadioBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioBoxAdapter() {
		if (radioBoxItemProvider == null) {
			radioBoxItemProvider = new RadioBoxItemProvider(this);
		}

		return radioBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.RotarySwitch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RotarySwitchItemProvider rotarySwitchItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.RotarySwitch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRotarySwitchAdapter() {
		if (rotarySwitchItemProvider == null) {
			rotarySwitchItemProvider = new RotarySwitchItemProvider(this);
		}

		return rotarySwitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.ComboBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComboBoxItemProvider comboBoxItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.ComboBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComboBoxAdapter() {
		if (comboBoxItemProvider == null) {
			comboBoxItemProvider = new ComboBoxItemProvider(this);
		}

		return comboBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Knob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KnobItemProvider knobItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Knob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKnobAdapter() {
		if (knobItemProvider == null) {
			knobItemProvider = new KnobItemProvider(this);
		}

		return knobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.PushButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PushButtonItemProvider pushButtonItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.PushButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPushButtonAdapter() {
		if (pushButtonItemProvider == null) {
			pushButtonItemProvider = new PushButtonItemProvider(this);
		}

		return pushButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.ToggleButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToggleButtonItemProvider toggleButtonItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.ToggleButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToggleButtonAdapter() {
		if (toggleButtonItemProvider == null) {
			toggleButtonItemProvider = new ToggleButtonItemProvider(this);
		}

		return toggleButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Slider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SliderItemProvider sliderItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Slider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSliderAdapter() {
		if (sliderItemProvider == null) {
			sliderItemProvider = new SliderItemProvider(this);
		}

		return sliderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.ScrollList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrollListItemProvider scrollListItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.ScrollList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrollListAdapter() {
		if (scrollListItemProvider == null) {
			scrollListItemProvider = new ScrollListItemProvider(this);
		}

		return scrollListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Counter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CounterItemProvider counterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Counter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCounterAdapter() {
		if (counterItemProvider == null) {
			counterItemProvider = new CounterItemProvider(this);
		}

		return counterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.TextDisplay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextDisplayItemProvider textDisplayItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.TextDisplay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextDisplayAdapter() {
		if (textDisplayItemProvider == null) {
			textDisplayItemProvider = new TextDisplayItemProvider(this);
		}

		return textDisplayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.LED} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LEDItemProvider ledItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.LED}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLEDAdapter() {
		if (ledItemProvider == null) {
			ledItemProvider = new LEDItemProvider(this);
		}

		return ledItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.NumberDisplay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumberDisplayItemProvider numberDisplayItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.NumberDisplay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumberDisplayAdapter() {
		if (numberDisplayItemProvider == null) {
			numberDisplayItemProvider = new NumberDisplayItemProvider(this);
		}

		return numberDisplayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Gauge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaugeItemProvider gaugeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Gauge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGaugeAdapter() {
		if (gaugeItemProvider == null) {
			gaugeItemProvider = new GaugeItemProvider(this);
		}

		return gaugeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.DateAndTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateAndTimeItemProvider dateAndTimeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.DateAndTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateAndTimeAdapter() {
		if (dateAndTimeItemProvider == null) {
			dateAndTimeItemProvider = new DateAndTimeItemProvider(this);
		}

		return dateAndTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.ComboWidgetFactory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComboWidgetFactoryItemProvider comboWidgetFactoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.ComboWidgetFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComboWidgetFactoryAdapter() {
		if (comboWidgetFactoryItemProvider == null) {
			comboWidgetFactoryItemProvider = new ComboWidgetFactoryItemProvider(this);
		}

		return comboWidgetFactoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.ComboWidget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComboWidgetItemProvider comboWidgetItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.ComboWidget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComboWidgetAdapter() {
		if (comboWidgetItemProvider == null) {
			comboWidgetItemProvider = new ComboWidgetItemProvider(this);
		}

		return comboWidgetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceItemProvider interfaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceAdapter() {
		if (interfaceItemProvider == null) {
			interfaceItemProvider = new InterfaceItemProvider(this);
		}

		return interfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Datatype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeItemProvider datatypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Datatype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatatypeAdapter() {
		if (datatypeItemProvider == null) {
			datatypeItemProvider = new DatatypeItemProvider(this);
		}

		return datatypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.DatatypeTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeTableItemProvider datatypeTableItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.DatatypeTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatatypeTableAdapter() {
		if (datatypeTableItemProvider == null) {
			datatypeTableItemProvider = new DatatypeTableItemProvider(this);
		}

		return datatypeTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.InterfaceTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceTableItemProvider interfaceTableItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.InterfaceTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceTableAdapter() {
		if (interfaceTableItemProvider == null) {
			interfaceTableItemProvider = new InterfaceTableItemProvider(this);
		}

		return interfaceTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Interaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractionItemProvider interactionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Interaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractionAdapter() {
		if (interactionItemProvider == null) {
			interactionItemProvider = new InteractionItemProvider(this);
		}

		return interactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.InterfaceConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceConnectorItemProvider interfaceConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.InterfaceConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceConnectorAdapter() {
		if (interfaceConnectorItemProvider == null) {
			interfaceConnectorItemProvider = new InterfaceConnectorItemProvider(this);
		}

		return interfaceConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.InteractionTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractionTableItemProvider interactionTableItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.InteractionTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractionTableAdapter() {
		if (interactionTableItemProvider == null) {
			interactionTableItemProvider = new InteractionTableItemProvider(this);
		}

		return interactionTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.TableFactory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableFactoryItemProvider tableFactoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.TableFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableFactoryAdapter() {
		if (tableFactoryItemProvider == null) {
			tableFactoryItemProvider = new TableFactoryItemProvider(this);
		}

		return tableFactoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.sirius.LIDLGUI.Widget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WidgetItemProvider widgetItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.sirius.LIDLGUI.Widget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWidgetAdapter() {
		if (widgetItemProvider == null) {
			widgetItemProvider = new WidgetItemProvider(this);
		}

		return widgetItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (guiItemProvider != null)
			guiItemProvider.dispose();
		if (basicWidgetItemProvider != null)
			basicWidgetItemProvider.dispose();
		if (containerItemProvider != null)
			containerItemProvider.dispose();
		if (buttonItemProvider != null)
			buttonItemProvider.dispose();
		if (panelItemProvider != null)
			panelItemProvider.dispose();
		if (indicatorItemProvider != null)
			indicatorItemProvider.dispose();
		if (sensorItemProvider != null)
			sensorItemProvider.dispose();
		if (radioBoxItemProvider != null)
			radioBoxItemProvider.dispose();
		if (rotarySwitchItemProvider != null)
			rotarySwitchItemProvider.dispose();
		if (comboBoxItemProvider != null)
			comboBoxItemProvider.dispose();
		if (knobItemProvider != null)
			knobItemProvider.dispose();
		if (pushButtonItemProvider != null)
			pushButtonItemProvider.dispose();
		if (toggleButtonItemProvider != null)
			toggleButtonItemProvider.dispose();
		if (sliderItemProvider != null)
			sliderItemProvider.dispose();
		if (scrollListItemProvider != null)
			scrollListItemProvider.dispose();
		if (counterItemProvider != null)
			counterItemProvider.dispose();
		if (textDisplayItemProvider != null)
			textDisplayItemProvider.dispose();
		if (ledItemProvider != null)
			ledItemProvider.dispose();
		if (numberDisplayItemProvider != null)
			numberDisplayItemProvider.dispose();
		if (gaugeItemProvider != null)
			gaugeItemProvider.dispose();
		if (dateAndTimeItemProvider != null)
			dateAndTimeItemProvider.dispose();
		if (comboWidgetFactoryItemProvider != null)
			comboWidgetFactoryItemProvider.dispose();
		if (comboWidgetItemProvider != null)
			comboWidgetItemProvider.dispose();
		if (interfaceItemProvider != null)
			interfaceItemProvider.dispose();
		if (datatypeItemProvider != null)
			datatypeItemProvider.dispose();
		if (datatypeTableItemProvider != null)
			datatypeTableItemProvider.dispose();
		if (interfaceTableItemProvider != null)
			interfaceTableItemProvider.dispose();
		if (interactionItemProvider != null)
			interactionItemProvider.dispose();
		if (interfaceConnectorItemProvider != null)
			interfaceConnectorItemProvider.dispose();
		if (interactionTableItemProvider != null)
			interactionTableItemProvider.dispose();
		if (tableFactoryItemProvider != null)
			tableFactoryItemProvider.dispose();
		if (widgetItemProvider != null)
			widgetItemProvider.dispose();
	}

}
