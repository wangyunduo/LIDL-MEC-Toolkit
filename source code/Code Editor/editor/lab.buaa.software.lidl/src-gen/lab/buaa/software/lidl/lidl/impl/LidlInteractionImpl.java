/**
 * generated by Xtext 2.25.0
 */
package lab.buaa.software.lidl.lidl.impl;

import java.util.Collection;

import lab.buaa.software.lidl.lidl.LidlExpresson;
import lab.buaa.software.lidl.lidl.LidlInteraction;
import lab.buaa.software.lidl.lidl.LidlInteractionID;
import lab.buaa.software.lidl.lidl.LidlInterfaceType;
import lab.buaa.software.lidl.lidl.LidlPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Interaction</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lab.buaa.software.lidl.lidl.impl.LidlInteractionImpl#getId <em>Id</em>}</li>
 *   <li>{@link lab.buaa.software.lidl.lidl.impl.LidlInteractionImpl#getInterface <em>Interface</em>}</li>
 *   <li>{@link lab.buaa.software.lidl.lidl.impl.LidlInteractionImpl#getNestedDef <em>Nested Def</em>}</li>
 *   <li>{@link lab.buaa.software.lidl.lidl.impl.LidlInteractionImpl#getDefinition <em>Definition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LidlInteractionImpl extends LidlDefinitionImpl implements LidlInteraction
{
  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected LidlInteractionID id;

  /**
   * The cached value of the '{@link #getInterface() <em>Interface</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterface()
   * @generated
   * @ordered
   */
  protected LidlInterfaceType interface_;

  /**
   * The cached value of the '{@link #getNestedDef() <em>Nested Def</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNestedDef()
   * @generated
   * @ordered
   */
  protected EList<LidlInteraction> nestedDef;

  /**
   * The cached value of the '{@link #getDefinition() <em>Definition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinition()
   * @generated
   * @ordered
   */
  protected LidlExpresson definition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LidlInteractionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LidlPackage.Literals.LIDL_INTERACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LidlInteractionID getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetId(LidlInteractionID newId, NotificationChain msgs)
  {
    LidlInteractionID oldId = id;
    id = newId;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LidlPackage.LIDL_INTERACTION__ID, oldId, newId);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(LidlInteractionID newId)
  {
    if (newId != id)
    {
      NotificationChain msgs = null;
      if (id != null)
        msgs = ((InternalEObject)id).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LidlPackage.LIDL_INTERACTION__ID, null, msgs);
      if (newId != null)
        msgs = ((InternalEObject)newId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LidlPackage.LIDL_INTERACTION__ID, null, msgs);
      msgs = basicSetId(newId, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LidlPackage.LIDL_INTERACTION__ID, newId, newId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LidlInterfaceType getInterface()
  {
    return interface_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInterface(LidlInterfaceType newInterface, NotificationChain msgs)
  {
    LidlInterfaceType oldInterface = interface_;
    interface_ = newInterface;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LidlPackage.LIDL_INTERACTION__INTERFACE, oldInterface, newInterface);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInterface(LidlInterfaceType newInterface)
  {
    if (newInterface != interface_)
    {
      NotificationChain msgs = null;
      if (interface_ != null)
        msgs = ((InternalEObject)interface_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LidlPackage.LIDL_INTERACTION__INTERFACE, null, msgs);
      if (newInterface != null)
        msgs = ((InternalEObject)newInterface).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LidlPackage.LIDL_INTERACTION__INTERFACE, null, msgs);
      msgs = basicSetInterface(newInterface, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LidlPackage.LIDL_INTERACTION__INTERFACE, newInterface, newInterface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LidlInteraction> getNestedDef()
  {
    if (nestedDef == null)
    {
      nestedDef = new EObjectContainmentEList<LidlInteraction>(LidlInteraction.class, this, LidlPackage.LIDL_INTERACTION__NESTED_DEF);
    }
    return nestedDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LidlExpresson getDefinition()
  {
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefinition(LidlExpresson newDefinition, NotificationChain msgs)
  {
    LidlExpresson oldDefinition = definition;
    definition = newDefinition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LidlPackage.LIDL_INTERACTION__DEFINITION, oldDefinition, newDefinition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefinition(LidlExpresson newDefinition)
  {
    if (newDefinition != definition)
    {
      NotificationChain msgs = null;
      if (definition != null)
        msgs = ((InternalEObject)definition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LidlPackage.LIDL_INTERACTION__DEFINITION, null, msgs);
      if (newDefinition != null)
        msgs = ((InternalEObject)newDefinition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LidlPackage.LIDL_INTERACTION__DEFINITION, null, msgs);
      msgs = basicSetDefinition(newDefinition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LidlPackage.LIDL_INTERACTION__DEFINITION, newDefinition, newDefinition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_INTERACTION__ID:
        return basicSetId(null, msgs);
      case LidlPackage.LIDL_INTERACTION__INTERFACE:
        return basicSetInterface(null, msgs);
      case LidlPackage.LIDL_INTERACTION__NESTED_DEF:
        return ((InternalEList<?>)getNestedDef()).basicRemove(otherEnd, msgs);
      case LidlPackage.LIDL_INTERACTION__DEFINITION:
        return basicSetDefinition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_INTERACTION__ID:
        return getId();
      case LidlPackage.LIDL_INTERACTION__INTERFACE:
        return getInterface();
      case LidlPackage.LIDL_INTERACTION__NESTED_DEF:
        return getNestedDef();
      case LidlPackage.LIDL_INTERACTION__DEFINITION:
        return getDefinition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_INTERACTION__ID:
        setId((LidlInteractionID)newValue);
        return;
      case LidlPackage.LIDL_INTERACTION__INTERFACE:
        setInterface((LidlInterfaceType)newValue);
        return;
      case LidlPackage.LIDL_INTERACTION__NESTED_DEF:
        getNestedDef().clear();
        getNestedDef().addAll((Collection<? extends LidlInteraction>)newValue);
        return;
      case LidlPackage.LIDL_INTERACTION__DEFINITION:
        setDefinition((LidlExpresson)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_INTERACTION__ID:
        setId((LidlInteractionID)null);
        return;
      case LidlPackage.LIDL_INTERACTION__INTERFACE:
        setInterface((LidlInterfaceType)null);
        return;
      case LidlPackage.LIDL_INTERACTION__NESTED_DEF:
        getNestedDef().clear();
        return;
      case LidlPackage.LIDL_INTERACTION__DEFINITION:
        setDefinition((LidlExpresson)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_INTERACTION__ID:
        return id != null;
      case LidlPackage.LIDL_INTERACTION__INTERFACE:
        return interface_ != null;
      case LidlPackage.LIDL_INTERACTION__NESTED_DEF:
        return nestedDef != null && !nestedDef.isEmpty();
      case LidlPackage.LIDL_INTERACTION__DEFINITION:
        return definition != null;
    }
    return super.eIsSet(featureID);
  }

} //LidlInteractionImpl
