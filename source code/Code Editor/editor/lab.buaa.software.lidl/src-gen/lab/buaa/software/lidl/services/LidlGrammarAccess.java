/*
 * generated by Xtext 2.25.0
 */
package lab.buaa.software.lidl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LidlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LidlProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPackAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPackPackageKeyword_0_0_0 = (Keyword)cPackAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsLidlImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsLidlDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		
		//LidlProgram returns LidlProgram:
		//    (pack?='package' name=QualifiedName ';')?
		//    imports+=LidlImport*
		//    definitions+=LidlDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//(pack?='package' name=QualifiedName ';')?
		//imports+=LidlImport*
		//definitions+=LidlDefinition*
		public Group getGroup() { return cGroup; }
		
		//(pack?='package' name=QualifiedName ';')?
		public Group getGroup_0() { return cGroup_0; }
		
		//pack?='package'
		public Assignment getPackAssignment_0_0() { return cPackAssignment_0_0; }
		
		//'package'
		public Keyword getPackPackageKeyword_0_0_0() { return cPackPackageKeyword_0_0_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_0_1_0() { return cNameQualifiedNameParserRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//imports+=LidlImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//LidlImport
		public RuleCall getImportsLidlImportParserRuleCall_1_0() { return cImportsLidlImportParserRuleCall_1_0; }
		
		//definitions+=LidlDefinition*
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }
		
		//LidlDefinition
		public RuleCall getDefinitionsLidlDefinitionParserRuleCall_2_0() { return cDefinitionsLidlDefinitionParserRuleCall_2_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class LidlImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LidlImport:
		//    'import' importedNamespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//    QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class LidlDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLidlDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLidlInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLidlInteractionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LidlDefinition returns LidlDefinition:
		//    LidlData | LidlInterface | LidlInteraction;
		@Override public ParserRule getRule() { return rule; }
		
		//LidlData | LidlInterface | LidlInteraction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LidlData
		public RuleCall getLidlDataParserRuleCall_0() { return cLidlDataParserRuleCall_0; }
		
		//LidlInterface
		public RuleCall getLidlInterfaceParserRuleCall_1() { return cLidlInterfaceParserRuleCall_1; }
		
		//LidlInteraction
		public RuleCall getLidlInteractionParserRuleCall_2() { return cLidlInteractionParserRuleCall_2; }
	}
	public class LidlDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNestedAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNestedWithKeyword_2_0_0 = (Keyword)cNestedAssignment_2_0.eContents().get(0);
		private final Assignment cNestedDefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNestedDefLidlDataParserRuleCall_2_1_0 = (RuleCall)cNestedDefAssignment_2_1.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDefinitionAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDefinitionLidlDataTypeParserRuleCall_4_0_0 = (RuleCall)cDefinitionAssignment_4_0.eContents().get(0);
		private final Assignment cDefinedAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cDefinedUndefinedKeyword_4_1_0 = (Keyword)cDefinedAssignment_4_1.eContents().get(0);
		
		//LidlData returns LidlData:
		//    'data' name=ID
		//    (nested?='with' nestedDef+=LidlData+)?
		//    'is'
		//    (definition=LidlDataType | defined?='Undefined');
		@Override public ParserRule getRule() { return rule; }
		
		//'data' name=ID
		//(nested?='with' nestedDef+=LidlData+)?
		//'is'
		//(definition=LidlDataType | defined?='Undefined')
		public Group getGroup() { return cGroup; }
		
		//'data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(nested?='with' nestedDef+=LidlData+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//nested?='with'
		public Assignment getNestedAssignment_2_0() { return cNestedAssignment_2_0; }
		
		//'with'
		public Keyword getNestedWithKeyword_2_0_0() { return cNestedWithKeyword_2_0_0; }
		
		//nestedDef+=LidlData+
		public Assignment getNestedDefAssignment_2_1() { return cNestedDefAssignment_2_1; }
		
		//LidlData
		public RuleCall getNestedDefLidlDataParserRuleCall_2_1_0() { return cNestedDefLidlDataParserRuleCall_2_1_0; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//(definition=LidlDataType | defined?='Undefined')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//definition=LidlDataType
		public Assignment getDefinitionAssignment_4_0() { return cDefinitionAssignment_4_0; }
		
		//LidlDataType
		public RuleCall getDefinitionLidlDataTypeParserRuleCall_4_0_0() { return cDefinitionLidlDataTypeParserRuleCall_4_0_0; }
		
		//defined?='Undefined'
		public Assignment getDefinedAssignment_4_1() { return cDefinedAssignment_4_1; }
		
		//'Undefined'
		public Keyword getDefinedUndefinedKeyword_4_1_0() { return cDefinedUndefinedKeyword_4_1_0; }
	}
	public class LidlDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlDataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LidlDataType returns LidlDataType:
		//    CompositeDataType | RefDataType;
		@Override public ParserRule getRule() { return rule; }
		
		//CompositeDataType | RefDataType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompositeDataType
		public RuleCall getCompositeDataTypeParserRuleCall_0() { return cCompositeDataTypeParserRuleCall_0; }
		
		//RefDataType
		public RuleCall getRefDataTypeParserRuleCall_1() { return cRefDataTypeParserRuleCall_1; }
	}
	public class CompositeDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.CompositeDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsCompositeDataTypeElementParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cItemsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cItemsCompositeDataTypeElementParserRuleCall_3_1_0 = (RuleCall)cItemsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompositeDataType returns LidlDataType:
		//    {CompositeDataType} '{'
		//    items+=CompositeDataTypeElement (',' items+=CompositeDataTypeElement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeDataType} '{'
		//items+=CompositeDataTypeElement (',' items+=CompositeDataTypeElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{CompositeDataType}
		public Action getCompositeDataTypeAction_0() { return cCompositeDataTypeAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//items+=CompositeDataTypeElement
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//CompositeDataTypeElement
		public RuleCall getItemsCompositeDataTypeElementParserRuleCall_2_0() { return cItemsCompositeDataTypeElementParserRuleCall_2_0; }
		
		//(',' items+=CompositeDataTypeElement)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//items+=CompositeDataTypeElement
		public Assignment getItemsAssignment_3_1() { return cItemsAssignment_3_1; }
		
		//CompositeDataTypeElement
		public RuleCall getItemsCompositeDataTypeElementParserRuleCall_3_1_0() { return cItemsCompositeDataTypeElementParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RefDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.RefDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefDataTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsRefDataTypeElementParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//RefDataType returns LidlDataType:
		//    {RefDataType} items+=RefDataTypeElement;
		@Override public ParserRule getRule() { return rule; }
		
		//{RefDataType} items+=RefDataTypeElement
		public Group getGroup() { return cGroup; }
		
		//{RefDataType}
		public Action getRefDataTypeAction_0() { return cRefDataTypeAction_0; }
		
		//items+=RefDataTypeElement
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//RefDataTypeElement
		public RuleCall getItemsRefDataTypeElementParserRuleCall_1_0() { return cItemsRefDataTypeElementParserRuleCall_1_0; }
	}
	public class TypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.TypeElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeDataTypeElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefDataTypeElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeElement returns TypeElement:
		//    CompositeDataTypeElement | RefDataTypeElement;
		@Override public ParserRule getRule() { return rule; }
		
		//CompositeDataTypeElement | RefDataTypeElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompositeDataTypeElement
		public RuleCall getCompositeDataTypeElementParserRuleCall_0() { return cCompositeDataTypeElementParserRuleCall_0; }
		
		//RefDataTypeElement
		public RuleCall getRefDataTypeElementParserRuleCall_1() { return cRefDataTypeElementParserRuleCall_1; }
	}
	public class CompositeDataTypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.CompositeDataTypeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeDataTypeElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cTypeLidlDataCrossReference_3_0_0 = (CrossReference)cTypeAssignment_3_0.eContents().get(0);
		private final RuleCall cTypeLidlDataQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cTypeLidlDataCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cIsArrayAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final Keyword cIsArrayLeftSquareBracketKeyword_3_1_0_0 = (Keyword)cIsArrayAssignment_3_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cTypeLidlDataCrossReference_3_1_1_0 = (CrossReference)cTypeAssignment_3_1_1.eContents().get(0);
		private final RuleCall cTypeLidlDataQualifiedNameParserRuleCall_3_1_1_0_1 = (RuleCall)cTypeLidlDataCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//CompositeDataTypeElement returns TypeElement:
		//    {CompositeDataTypeElement} name=ID ':'
		//    (type=[LidlData|QualifiedName] |
		//    isArray?='[' type=[LidlData|QualifiedName] ']');
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeDataTypeElement} name=ID ':'
		//(type=[LidlData|QualifiedName] |
		//isArray?='[' type=[LidlData|QualifiedName] ']')
		public Group getGroup() { return cGroup; }
		
		//{CompositeDataTypeElement}
		public Action getCompositeDataTypeElementAction_0() { return cCompositeDataTypeElementAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(type=[LidlData|QualifiedName] |
		//isArray?='[' type=[LidlData|QualifiedName] ']')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//type=[LidlData|QualifiedName]
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }
		
		//[LidlData|QualifiedName]
		public CrossReference getTypeLidlDataCrossReference_3_0_0() { return cTypeLidlDataCrossReference_3_0_0; }
		
		//QualifiedName
		public RuleCall getTypeLidlDataQualifiedNameParserRuleCall_3_0_0_1() { return cTypeLidlDataQualifiedNameParserRuleCall_3_0_0_1; }
		
		//isArray?='[' type=[LidlData|QualifiedName] ']'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//isArray?='['
		public Assignment getIsArrayAssignment_3_1_0() { return cIsArrayAssignment_3_1_0; }
		
		//'['
		public Keyword getIsArrayLeftSquareBracketKeyword_3_1_0_0() { return cIsArrayLeftSquareBracketKeyword_3_1_0_0; }
		
		//type=[LidlData|QualifiedName]
		public Assignment getTypeAssignment_3_1_1() { return cTypeAssignment_3_1_1; }
		
		//[LidlData|QualifiedName]
		public CrossReference getTypeLidlDataCrossReference_3_1_1_0() { return cTypeLidlDataCrossReference_3_1_1_0; }
		
		//QualifiedName
		public RuleCall getTypeLidlDataQualifiedNameParserRuleCall_3_1_1_0_1() { return cTypeLidlDataQualifiedNameParserRuleCall_3_1_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_1_2() { return cRightSquareBracketKeyword_3_1_2; }
	}
	public class RefDataTypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.RefDataTypeElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRefDataTypeElementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTypeLidlDataCrossReference_0_1_0 = (CrossReference)cTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cTypeLidlDataQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cTypeLidlDataCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIsArrayAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIsArrayLeftSquareBracketKeyword_1_0_0 = (Keyword)cIsArrayAssignment_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeLidlDataCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeLidlDataQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cTypeLidlDataCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//RefDataTypeElement returns TypeElement:
		//    {RefDataTypeElement}
		//    type=[LidlData|QualifiedName] |
		//    isArray?='[' type=[LidlData|QualifiedName] ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{RefDataTypeElement}
		//type=[LidlData|QualifiedName] |
		//isArray?='[' type=[LidlData|QualifiedName] ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RefDataTypeElement}
		//type=[LidlData|QualifiedName]
		public Group getGroup_0() { return cGroup_0; }
		
		//{RefDataTypeElement}
		public Action getRefDataTypeElementAction_0_0() { return cRefDataTypeElementAction_0_0; }
		
		//type=[LidlData|QualifiedName]
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//[LidlData|QualifiedName]
		public CrossReference getTypeLidlDataCrossReference_0_1_0() { return cTypeLidlDataCrossReference_0_1_0; }
		
		//QualifiedName
		public RuleCall getTypeLidlDataQualifiedNameParserRuleCall_0_1_0_1() { return cTypeLidlDataQualifiedNameParserRuleCall_0_1_0_1; }
		
		//isArray?='[' type=[LidlData|QualifiedName] ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//isArray?='['
		public Assignment getIsArrayAssignment_1_0() { return cIsArrayAssignment_1_0; }
		
		//'['
		public Keyword getIsArrayLeftSquareBracketKeyword_1_0_0() { return cIsArrayLeftSquareBracketKeyword_1_0_0; }
		
		//type=[LidlData|QualifiedName]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//[LidlData|QualifiedName]
		public CrossReference getTypeLidlDataCrossReference_1_1_0() { return cTypeLidlDataCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getTypeLidlDataQualifiedNameParserRuleCall_1_1_0_1() { return cTypeLidlDataQualifiedNameParserRuleCall_1_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class LidlInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNestedAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNestedWithKeyword_2_0_0 = (Keyword)cNestedAssignment_2_0.eContents().get(0);
		private final Assignment cNestedDefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNestedDefLidlInterfaceParserRuleCall_2_1_0 = (RuleCall)cNestedDefAssignment_2_1.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cDefinitionAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cDefinitionLidlInterfaceTypeParserRuleCall_4_0_0 = (RuleCall)cDefinitionAssignment_4_0.eContents().get(0);
		private final Assignment cDefinedAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cDefinedUndefinedKeyword_4_1_0 = (Keyword)cDefinedAssignment_4_1.eContents().get(0);
		
		//LidlInterface returns LidlInterface:
		//    'interface' name=ID
		//    (nested?='with' nestedDef+=LidlInterface+)?
		//    'is'
		//    (definition=LidlInterfaceType | defined?='Undefined');
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=ID
		//(nested?='with' nestedDef+=LidlInterface+)?
		//'is'
		//(definition=LidlInterfaceType | defined?='Undefined')
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(nested?='with' nestedDef+=LidlInterface+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//nested?='with'
		public Assignment getNestedAssignment_2_0() { return cNestedAssignment_2_0; }
		
		//'with'
		public Keyword getNestedWithKeyword_2_0_0() { return cNestedWithKeyword_2_0_0; }
		
		//nestedDef+=LidlInterface+
		public Assignment getNestedDefAssignment_2_1() { return cNestedDefAssignment_2_1; }
		
		//LidlInterface
		public RuleCall getNestedDefLidlInterfaceParserRuleCall_2_1_0() { return cNestedDefLidlInterfaceParserRuleCall_2_1_0; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//(definition=LidlInterfaceType | defined?='Undefined')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//definition=LidlInterfaceType
		public Assignment getDefinitionAssignment_4_0() { return cDefinitionAssignment_4_0; }
		
		//LidlInterfaceType
		public RuleCall getDefinitionLidlInterfaceTypeParserRuleCall_4_0_0() { return cDefinitionLidlInterfaceTypeParserRuleCall_4_0_0; }
		
		//defined?='Undefined'
		public Assignment getDefinedAssignment_4_1() { return cDefinedAssignment_4_1; }
		
		//'Undefined'
		public Keyword getDefinedUndefinedKeyword_4_1_0() { return cDefinedUndefinedKeyword_4_1_0; }
	}
	public class LidlInterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlInterfaceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomInterfaceTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeInterfaceTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cRefInterfaceTypeParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cConjugateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cConjugateApostropheKeyword_2_1_0 = (Keyword)cConjugateAssignment_2_1.eContents().get(0);
		
		//LidlInterfaceType returns LidlInterfaceType:
		//    (AtomInterfaceType) | (CompositeInterfaceType) | (RefInterfaceType (conjugate?='\'')?);
		@Override public ParserRule getRule() { return rule; }
		
		//(AtomInterfaceType) | (CompositeInterfaceType) | (RefInterfaceType (conjugate?='\'')?)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(AtomInterfaceType)
		public RuleCall getAtomInterfaceTypeParserRuleCall_0() { return cAtomInterfaceTypeParserRuleCall_0; }
		
		//(CompositeInterfaceType)
		public RuleCall getCompositeInterfaceTypeParserRuleCall_1() { return cCompositeInterfaceTypeParserRuleCall_1; }
		
		//(RefInterfaceType (conjugate?='\'')?)
		public Group getGroup_2() { return cGroup_2; }
		
		//RefInterfaceType
		public RuleCall getRefInterfaceTypeParserRuleCall_2_0() { return cRefInterfaceTypeParserRuleCall_2_0; }
		
		//(conjugate?='\'')?
		public Assignment getConjugateAssignment_2_1() { return cConjugateAssignment_2_1; }
		
		//'\''
		public Keyword getConjugateApostropheKeyword_2_1_0() { return cConjugateApostropheKeyword_2_1_0; }
	}
	public class InterfaceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.InterfaceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomInterfaceTypeElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeInterfaceTypeElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRefInterfaceTypeElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InterfaceElement returns InterfaceElement:
		//    AtomInterfaceTypeElement | CompositeInterfaceTypeElement | RefInterfaceTypeElement;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomInterfaceTypeElement | CompositeInterfaceTypeElement | RefInterfaceTypeElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AtomInterfaceTypeElement
		public RuleCall getAtomInterfaceTypeElementParserRuleCall_0() { return cAtomInterfaceTypeElementParserRuleCall_0; }
		
		//CompositeInterfaceTypeElement
		public RuleCall getCompositeInterfaceTypeElementParserRuleCall_1() { return cCompositeInterfaceTypeElementParserRuleCall_1; }
		
		//RefInterfaceTypeElement
		public RuleCall getRefInterfaceTypeElementParserRuleCall_2() { return cRefInterfaceTypeElementParserRuleCall_2; }
	}
	public class AtomInterfaceTypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.AtomInterfaceTypeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtomInterfaceTypeElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeLidlDataCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeLidlDataQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeLidlDataCrossReference_1_0.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionDataDirectionEnumRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		
		//AtomInterfaceTypeElement returns InterfaceElement:
		//    {AtomInterfaceTypeElement} type=[LidlData|QualifiedName] direction=DataDirection;
		@Override public ParserRule getRule() { return rule; }
		
		//{AtomInterfaceTypeElement} type=[LidlData|QualifiedName] direction=DataDirection
		public Group getGroup() { return cGroup; }
		
		//{AtomInterfaceTypeElement}
		public Action getAtomInterfaceTypeElementAction_0() { return cAtomInterfaceTypeElementAction_0; }
		
		//type=[LidlData|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[LidlData|QualifiedName]
		public CrossReference getTypeLidlDataCrossReference_1_0() { return cTypeLidlDataCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeLidlDataQualifiedNameParserRuleCall_1_0_1() { return cTypeLidlDataQualifiedNameParserRuleCall_1_0_1; }
		
		//direction=DataDirection
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }
		
		//DataDirection
		public RuleCall getDirectionDataDirectionEnumRuleCall_2_0() { return cDirectionDataDirectionEnumRuleCall_2_0; }
	}
	public class CompositeInterfaceTypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.CompositeInterfaceTypeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeInterfaceTypeElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final CrossReference cTypeLidlDataCrossReference_3_0_0_0 = (CrossReference)cTypeAssignment_3_0_0.eContents().get(0);
		private final RuleCall cTypeLidlDataQualifiedNameParserRuleCall_3_0_0_0_1 = (RuleCall)cTypeLidlDataCrossReference_3_0_0_0.eContents().get(1);
		private final Assignment cDirectionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDirectionDataDirectionEnumRuleCall_3_0_1_0 = (RuleCall)cDirectionAssignment_3_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cTypeLidlInterfaceCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeLidlInterfaceQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cTypeLidlInterfaceCrossReference_3_1_0.eContents().get(1);
		
		//CompositeInterfaceTypeElement returns InterfaceElement:
		//    {CompositeInterfaceTypeElement} name=ID ':' (type=[LidlData|QualifiedName] direction=DataDirection |
		//    type=[LidlInterface|QualifiedName]);
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeInterfaceTypeElement} name=ID ':' (type=[LidlData|QualifiedName] direction=DataDirection |
		//type=[LidlInterface|QualifiedName])
		public Group getGroup() { return cGroup; }
		
		//{CompositeInterfaceTypeElement}
		public Action getCompositeInterfaceTypeElementAction_0() { return cCompositeInterfaceTypeElementAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(type=[LidlData|QualifiedName] direction=DataDirection |
		//   type=[LidlInterface|QualifiedName])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//type=[LidlData|QualifiedName] direction=DataDirection
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//type=[LidlData|QualifiedName]
		public Assignment getTypeAssignment_3_0_0() { return cTypeAssignment_3_0_0; }
		
		//[LidlData|QualifiedName]
		public CrossReference getTypeLidlDataCrossReference_3_0_0_0() { return cTypeLidlDataCrossReference_3_0_0_0; }
		
		//QualifiedName
		public RuleCall getTypeLidlDataQualifiedNameParserRuleCall_3_0_0_0_1() { return cTypeLidlDataQualifiedNameParserRuleCall_3_0_0_0_1; }
		
		//direction=DataDirection
		public Assignment getDirectionAssignment_3_0_1() { return cDirectionAssignment_3_0_1; }
		
		//DataDirection
		public RuleCall getDirectionDataDirectionEnumRuleCall_3_0_1_0() { return cDirectionDataDirectionEnumRuleCall_3_0_1_0; }
		
		//type=[LidlInterface|QualifiedName]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//[LidlInterface|QualifiedName]
		public CrossReference getTypeLidlInterfaceCrossReference_3_1_0() { return cTypeLidlInterfaceCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getTypeLidlInterfaceQualifiedNameParserRuleCall_3_1_0_1() { return cTypeLidlInterfaceQualifiedNameParserRuleCall_3_1_0_1; }
	}
	public class RefInterfaceTypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.RefInterfaceTypeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefInterfaceTypeElementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeLidlInterfaceCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeLidlInterfaceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeLidlInterfaceCrossReference_1_0.eContents().get(1);
		
		//RefInterfaceTypeElement returns InterfaceElement:
		//    {RefInterfaceTypeElement} type=[LidlInterface|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//{RefInterfaceTypeElement} type=[LidlInterface|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//{RefInterfaceTypeElement}
		public Action getRefInterfaceTypeElementAction_0() { return cRefInterfaceTypeElementAction_0; }
		
		//type=[LidlInterface|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[LidlInterface|QualifiedName]
		public CrossReference getTypeLidlInterfaceCrossReference_1_0() { return cTypeLidlInterfaceCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getTypeLidlInterfaceQualifiedNameParserRuleCall_1_0_1() { return cTypeLidlInterfaceQualifiedNameParserRuleCall_1_0_1; }
	}
	public class AtomInterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.AtomInterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtomInterfaceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsAtomInterfaceTypeElementParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//AtomInterfaceType returns LidlInterfaceType:
		//    {AtomInterfaceType} items=AtomInterfaceTypeElement;
		@Override public ParserRule getRule() { return rule; }
		
		//{AtomInterfaceType} items=AtomInterfaceTypeElement
		public Group getGroup() { return cGroup; }
		
		//{AtomInterfaceType}
		public Action getAtomInterfaceTypeAction_0() { return cAtomInterfaceTypeAction_0; }
		
		//items=AtomInterfaceTypeElement
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//AtomInterfaceTypeElement
		public RuleCall getItemsAtomInterfaceTypeElementParserRuleCall_1_0() { return cItemsAtomInterfaceTypeElementParserRuleCall_1_0; }
	}
	public class CompositeInterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.CompositeInterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositeInterfaceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemsCompositeInterfaceTypeElementParserRuleCall_2_0 = (RuleCall)cItemsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cItemsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cItemsCompositeInterfaceTypeElementParserRuleCall_3_1_0 = (RuleCall)cItemsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompositeInterfaceType returns LidlInterfaceType:
		//    {CompositeInterfaceType} '{'
		//    items+=CompositeInterfaceTypeElement (',' items+=CompositeInterfaceTypeElement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CompositeInterfaceType} '{'
		//items+=CompositeInterfaceTypeElement (',' items+=CompositeInterfaceTypeElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{CompositeInterfaceType}
		public Action getCompositeInterfaceTypeAction_0() { return cCompositeInterfaceTypeAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//items+=CompositeInterfaceTypeElement
		public Assignment getItemsAssignment_2() { return cItemsAssignment_2; }
		
		//CompositeInterfaceTypeElement
		public RuleCall getItemsCompositeInterfaceTypeElementParserRuleCall_2_0() { return cItemsCompositeInterfaceTypeElementParserRuleCall_2_0; }
		
		//(',' items+=CompositeInterfaceTypeElement)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//items+=CompositeInterfaceTypeElement
		public Assignment getItemsAssignment_3_1() { return cItemsAssignment_3_1; }
		
		//CompositeInterfaceTypeElement
		public RuleCall getItemsCompositeInterfaceTypeElementParserRuleCall_3_1_0() { return cItemsCompositeInterfaceTypeElementParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RefInterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.RefInterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefInterfaceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsRefInterfaceTypeElementParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//RefInterfaceType returns LidlInterfaceType:
		//    {RefInterfaceType} items=RefInterfaceTypeElement;
		@Override public ParserRule getRule() { return rule; }
		
		//{RefInterfaceType} items=RefInterfaceTypeElement
		public Group getGroup() { return cGroup; }
		
		//{RefInterfaceType}
		public Action getRefInterfaceTypeAction_0() { return cRefInterfaceTypeAction_0; }
		
		//items=RefInterfaceTypeElement
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//RefInterfaceTypeElement
		public RuleCall getItemsRefInterfaceTypeElementParserRuleCall_1_0() { return cItemsRefInterfaceTypeElementParserRuleCall_1_0; }
	}
	public class LidlInteractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlInteraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInteractionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdLidlInteractionIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterfaceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInterfaceLidlInterfaceTypeParserRuleCall_3_0 = (RuleCall)cInterfaceAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cNestedAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cNestedWithKeyword_4_0_0 = (Keyword)cNestedAssignment_4_0.eContents().get(0);
		private final Assignment cNestedDefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNestedDefLidlInteractionParserRuleCall_4_1_0 = (RuleCall)cNestedDefAssignment_4_1.eContents().get(0);
		private final Keyword cIsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDefinitionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDefinitionLidlExpressionParserRuleCall_7_0 = (RuleCall)cDefinitionAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//LidlInteraction returns LidlInteraction:
		//    'interaction'
		//    id=LidlInteractionID ':' interface=LidlInterfaceType
		//    (nested?='with' nestedDef+=LidlInteraction+)?
		//    'is'
		//    '('
		//    definition=LidlExpression
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'interaction'
		//id=LidlInteractionID ':' interface=LidlInterfaceType
		//(nested?='with' nestedDef+=LidlInteraction+)?
		//'is'
		//'('
		//definition=LidlExpression
		//')'
		public Group getGroup() { return cGroup; }
		
		//'interaction'
		public Keyword getInteractionKeyword_0() { return cInteractionKeyword_0; }
		
		//id=LidlInteractionID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//LidlInteractionID
		public RuleCall getIdLidlInteractionIDParserRuleCall_1_0() { return cIdLidlInteractionIDParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//interface=LidlInterfaceType
		public Assignment getInterfaceAssignment_3() { return cInterfaceAssignment_3; }
		
		//LidlInterfaceType
		public RuleCall getInterfaceLidlInterfaceTypeParserRuleCall_3_0() { return cInterfaceLidlInterfaceTypeParserRuleCall_3_0; }
		
		//(nested?='with' nestedDef+=LidlInteraction+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//nested?='with'
		public Assignment getNestedAssignment_4_0() { return cNestedAssignment_4_0; }
		
		//'with'
		public Keyword getNestedWithKeyword_4_0_0() { return cNestedWithKeyword_4_0_0; }
		
		//nestedDef+=LidlInteraction+
		public Assignment getNestedDefAssignment_4_1() { return cNestedDefAssignment_4_1; }
		
		//LidlInteraction
		public RuleCall getNestedDefLidlInteractionParserRuleCall_4_1_0() { return cNestedDefLidlInteractionParserRuleCall_4_1_0; }
		
		//'is'
		public Keyword getIsKeyword_5() { return cIsKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//definition=LidlExpression
		public Assignment getDefinitionAssignment_7() { return cDefinitionAssignment_7; }
		
		//LidlExpression
		public RuleCall getDefinitionLidlExpressionParserRuleCall_7_0() { return cDefinitionLidlExpressionParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class LidlInteractionIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlInteractionID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsIDPartParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LidlInteractionID returns LidlInteractionID:
		//    '(' items+=IDPart+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' items+=IDPart+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//items+=IDPart+
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//IDPart
		public RuleCall getItemsIDPartParserRuleCall_1_0() { return cItemsIDPartParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class IDPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.IDPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLidlTextParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLidlParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IDPart returns IDPart:
		//    LidlText | LidlParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//LidlText | LidlParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LidlText
		public RuleCall getLidlTextParserRuleCall_0() { return cLidlTextParserRuleCall_0; }
		
		//LidlParameter
		public RuleCall getLidlParameterParserRuleCall_1() { return cLidlParameterParserRuleCall_1; }
	}
	public class LidlParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLidlParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInterfaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInterfaceLidlInterfaceTypeParserRuleCall_4_0 = (RuleCall)cInterfaceAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LidlParameter returns IDPart:
		//    {LidlParameter} '(' name=ID ':' interface=LidlInterfaceType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{LidlParameter} '(' name=ID ':' interface=LidlInterfaceType ')'
		public Group getGroup() { return cGroup; }
		
		//{LidlParameter}
		public Action getLidlParameterAction_0() { return cLidlParameterAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//interface=LidlInterfaceType
		public Assignment getInterfaceAssignment_4() { return cInterfaceAssignment_4; }
		
		//LidlInterfaceType
		public RuleCall getInterfaceLidlInterfaceTypeParserRuleCall_4_0() { return cInterfaceLidlInterfaceTypeParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class LidlTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLidlTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTextAlternatives_1_0 = (Alternatives)cTextAssignment_1.eContents().get(0);
		private final RuleCall cTextIDTerminalRuleCall_1_0_0 = (RuleCall)cTextAlternatives_1_0.eContents().get(0);
		private final RuleCall cTextLIDLIDSYMBOLTerminalRuleCall_1_0_1 = (RuleCall)cTextAlternatives_1_0.eContents().get(1);
		
		//LidlText returns IDPart:
		//    {LidlText} text=(ID | LIDLIDSYMBOL);
		@Override public ParserRule getRule() { return rule; }
		
		//{LidlText} text=(ID | LIDLIDSYMBOL)
		public Group getGroup() { return cGroup; }
		
		//{LidlText}
		public Action getLidlTextAction_0() { return cLidlTextAction_0; }
		
		//text=(ID | LIDLIDSYMBOL)
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//(ID | LIDLIDSYMBOL)
		public Alternatives getTextAlternatives_1_0() { return cTextAlternatives_1_0; }
		
		//ID
		public RuleCall getTextIDTerminalRuleCall_1_0_0() { return cTextIDTerminalRuleCall_1_0_0; }
		
		//LIDLIDSYMBOL
		public RuleCall getTextLIDLIDSYMBOLTerminalRuleCall_1_0_1() { return cTextLIDLIDSYMBOLTerminalRuleCall_1_0_1; }
	}
	public class LidlExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLidlCallExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLidlTerminalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLidlArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LidlExpression returns LidlExpresson:
		//    LidlCallExpression | LidlTerminalExpression | LidlArray;
		@Override public ParserRule getRule() { return rule; }
		
		//LidlCallExpression | LidlTerminalExpression | LidlArray
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LidlCallExpression
		public RuleCall getLidlCallExpressionParserRuleCall_0() { return cLidlCallExpressionParserRuleCall_0; }
		
		//LidlTerminalExpression
		public RuleCall getLidlTerminalExpressionParserRuleCall_1() { return cLidlTerminalExpressionParserRuleCall_1; }
		
		//LidlArray
		public RuleCall getLidlArrayParserRuleCall_2() { return cLidlArrayParserRuleCall_2; }
	}
	public class LidlCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLidlCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsCallPartParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		
		//LidlCallExpression returns LidlExpression:
		//    {LidlCallExpression} items+=CallPart+;
		@Override public ParserRule getRule() { return rule; }
		
		//{LidlCallExpression} items+=CallPart+
		public Group getGroup() { return cGroup; }
		
		//{LidlCallExpression}
		public Action getLidlCallExpressionAction_0() { return cLidlCallExpressionAction_0; }
		
		//items+=CallPart+
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//CallPart
		public RuleCall getItemsCallPartParserRuleCall_1_0() { return cItemsCallPartParserRuleCall_1_0; }
	}
	public class CallPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.CallPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTextCallPartAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTextAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cTextAlternatives_0_1_0 = (Alternatives)cTextAssignment_0_1.eContents().get(0);
		private final RuleCall cTextIDTerminalRuleCall_0_1_0_0 = (RuleCall)cTextAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cTextLIDLIDSYMBOLTerminalRuleCall_0_1_0_1 = (RuleCall)cTextAlternatives_0_1_0.eContents().get(1);
		private final Keyword cTextCommaKeyword_0_1_0_2 = (Keyword)cTextAlternatives_0_1_0.eContents().get(2);
		private final Keyword cTextFullStopKeyword_0_1_0_3 = (Keyword)cTextAlternatives_0_1_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParamCallPartAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cParamAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParamLidlExpressionParserRuleCall_1_2_0 = (RuleCall)cParamAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//CallPart returns CallPart:
		//    {TextCallPart} text=(ID | LIDLIDSYMBOL | ',' | '.') | {ParamCallPart} '(' param=LidlExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{TextCallPart} text=(ID | LIDLIDSYMBOL | ',' | '.') | {ParamCallPart} '(' param=LidlExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TextCallPart} text=(ID | LIDLIDSYMBOL | ',' | '.')
		public Group getGroup_0() { return cGroup_0; }
		
		//{TextCallPart}
		public Action getTextCallPartAction_0_0() { return cTextCallPartAction_0_0; }
		
		//text=(ID | LIDLIDSYMBOL | ',' | '.')
		public Assignment getTextAssignment_0_1() { return cTextAssignment_0_1; }
		
		//(ID | LIDLIDSYMBOL | ',' | '.')
		public Alternatives getTextAlternatives_0_1_0() { return cTextAlternatives_0_1_0; }
		
		//ID
		public RuleCall getTextIDTerminalRuleCall_0_1_0_0() { return cTextIDTerminalRuleCall_0_1_0_0; }
		
		//LIDLIDSYMBOL
		public RuleCall getTextLIDLIDSYMBOLTerminalRuleCall_0_1_0_1() { return cTextLIDLIDSYMBOLTerminalRuleCall_0_1_0_1; }
		
		//','
		public Keyword getTextCommaKeyword_0_1_0_2() { return cTextCommaKeyword_0_1_0_2; }
		
		//'.'
		public Keyword getTextFullStopKeyword_0_1_0_3() { return cTextFullStopKeyword_0_1_0_3; }
		
		//{ParamCallPart} '(' param=LidlExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ParamCallPart}
		public Action getParamCallPartAction_1_0() { return cParamCallPartAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//param=LidlExpression
		public Assignment getParamAssignment_1_2() { return cParamAssignment_1_2; }
		
		//LidlExpression
		public RuleCall getParamLidlExpressionParserRuleCall_1_2_0() { return cParamLidlExpressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class LidlTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLidlStringConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLidlNumberConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLidlBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLidlAvtivationConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueActiveKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueInactiveKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLidlCompositionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cBodyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBodyLidlCompositionParserRuleCall_4_1_0 = (RuleCall)cBodyAssignment_4_1.eContents().get(0);
		
		//LidlTerminalExpression returns LidlExpression:
		//    {LidlStringConstant} value=STRING |
		//    {LidlNumberConstant} value=NUMBER |
		//    {LidlBoolConstant} value=('true' | 'false') |
		//    {LidlAvtivationConstant} value=('active' | 'inactive') |
		//    {LidlComposition} body=LidlComposition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LidlStringConstant} value=STRING |
		//{LidlNumberConstant} value=NUMBER |
		//{LidlBoolConstant} value=('true' | 'false') |
		//{LidlAvtivationConstant} value=('active' | 'inactive') |
		//{LidlComposition} body=LidlComposition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LidlStringConstant} value=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//{LidlStringConstant}
		public Action getLidlStringConstantAction_0_0() { return cLidlStringConstantAction_0_0; }
		
		//value=STRING
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_1_0() { return cValueSTRINGTerminalRuleCall_0_1_0; }
		
		//{LidlNumberConstant} value=NUMBER
		public Group getGroup_1() { return cGroup_1; }
		
		//{LidlNumberConstant}
		public Action getLidlNumberConstantAction_1_0() { return cLidlNumberConstantAction_1_0; }
		
		//value=NUMBER
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_1_1_0() { return cValueNUMBERTerminalRuleCall_1_1_0; }
		
		//{LidlBoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{LidlBoolConstant}
		public Action getLidlBoolConstantAction_2_0() { return cLidlBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{LidlAvtivationConstant} value=('active' | 'inactive')
		public Group getGroup_3() { return cGroup_3; }
		
		//{LidlAvtivationConstant}
		public Action getLidlAvtivationConstantAction_3_0() { return cLidlAvtivationConstantAction_3_0; }
		
		//value=('active' | 'inactive')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('active' | 'inactive')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'active'
		public Keyword getValueActiveKeyword_3_1_0_0() { return cValueActiveKeyword_3_1_0_0; }
		
		//'inactive'
		public Keyword getValueInactiveKeyword_3_1_0_1() { return cValueInactiveKeyword_3_1_0_1; }
		
		//{LidlComposition} body=LidlComposition
		public Group getGroup_4() { return cGroup_4; }
		
		//{LidlComposition}
		public Action getLidlCompositionAction_4_0() { return cLidlCompositionAction_4_0; }
		
		//body=LidlComposition
		public Assignment getBodyAssignment_4_1() { return cBodyAssignment_4_1; }
		
		//LidlComposition
		public RuleCall getBodyLidlCompositionParserRuleCall_4_1_0() { return cBodyLidlCompositionParserRuleCall_4_1_0; }
	}
	public class LidlArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLidlExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cItemAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cItemLidlArrayItemParserRuleCall_2_0_0 = (RuleCall)cItemAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cItemAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cItemLidlArrayItemParserRuleCall_2_1_1_0 = (RuleCall)cItemAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LidlArray returns LidlExpression:
		//    {LidlExpression} '[' (item+=LidlArrayItem (',' item+=LidlArrayItem)*)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{LidlExpression} '[' (item+=LidlArrayItem (',' item+=LidlArrayItem)*)* ']'
		public Group getGroup() { return cGroup; }
		
		//{LidlExpression}
		public Action getLidlExpressionAction_0() { return cLidlExpressionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(item+=LidlArrayItem (',' item+=LidlArrayItem)*)*
		public Group getGroup_2() { return cGroup_2; }
		
		//item+=LidlArrayItem
		public Assignment getItemAssignment_2_0() { return cItemAssignment_2_0; }
		
		//LidlArrayItem
		public RuleCall getItemLidlArrayItemParserRuleCall_2_0_0() { return cItemLidlArrayItemParserRuleCall_2_0_0; }
		
		//(',' item+=LidlArrayItem)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//item+=LidlArrayItem
		public Assignment getItemAssignment_2_1_1() { return cItemAssignment_2_1_1; }
		
		//LidlArrayItem
		public RuleCall getItemLidlArrayItemParserRuleCall_2_1_1_0() { return cItemLidlArrayItemParserRuleCall_2_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class LidlArrayItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlArrayItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLidlExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LidlArrayItem:
		//    '(' value=LidlExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' value=LidlExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//value=LidlExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//LidlExpression
		public RuleCall getValueLidlExpressionParserRuleCall_1_0() { return cValueLidlExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LidlSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLidlParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLidlCompositionElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeInterfaceTypeElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LidlSymbol:
		//    LidlParameter | LidlCompositionElement | CompositeInterfaceTypeElement;
		@Override public ParserRule getRule() { return rule; }
		
		//LidlParameter | LidlCompositionElement | CompositeInterfaceTypeElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LidlParameter
		public RuleCall getLidlParameterParserRuleCall_0() { return cLidlParameterParserRuleCall_0; }
		
		//LidlCompositionElement
		public RuleCall getLidlCompositionElementParserRuleCall_1() { return cLidlCompositionElementParserRuleCall_1; }
		
		//CompositeInterfaceTypeElement
		public RuleCall getCompositeInterfaceTypeElementParserRuleCall_2() { return cCompositeInterfaceTypeElementParserRuleCall_2; }
	}
	public class LidlCompositionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlCompositionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamIDTerminalRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueLidlExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LidlCompositionElement:
		//    (param=ID) ':' '(' value=LidlExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(param=ID) ':' '(' value=LidlExpression ')'
		public Group getGroup() { return cGroup; }
		
		//(param=ID)
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }
		
		//ID
		public RuleCall getParamIDTerminalRuleCall_0_0() { return cParamIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=LidlExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//LidlExpression
		public RuleCall getValueLidlExpressionParserRuleCall_3_0() { return cValueLidlExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LidlCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LidlComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsLidlCompositionElementParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsLidlCompositionElementParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LidlComposition returns LidlExpression:
		//    '{'
		//    items+=LidlCompositionElement (',' items+=LidlCompositionElement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{'
		//items+=LidlCompositionElement (',' items+=LidlCompositionElement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//items+=LidlCompositionElement
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }
		
		//LidlCompositionElement
		public RuleCall getItemsLidlCompositionElementParserRuleCall_1_0() { return cItemsLidlCompositionElementParserRuleCall_1_0; }
		
		//(',' items+=LidlCompositionElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//items+=LidlCompositionElement
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }
		
		//LidlCompositionElement
		public RuleCall getItemsLidlCompositionElementParserRuleCall_2_1_0() { return cItemsLidlCompositionElementParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	public class DataDirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.DataDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINInKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTOutKeyword_1_0 = (Keyword)cOUTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DataDirection:
		//    IN='in' | OUT='out';
		public EnumRule getRule() { return rule; }
		
		//IN='in' | OUT='out'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN='in'
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getINInKeyword_0_0() { return cINInKeyword_0_0; }
		
		//OUT='out'
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_1() { return cOUTEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOUTOutKeyword_1_0() { return cOUTOutKeyword_1_0; }
	}
	
	private final LidlProgramElements pLidlProgram;
	private final QualifiedNameElements pQualifiedName;
	private final LidlImportElements pLidlImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final LidlDefinitionElements pLidlDefinition;
	private final LidlDataElements pLidlData;
	private final LidlDataTypeElements pLidlDataType;
	private final CompositeDataTypeElements pCompositeDataType;
	private final RefDataTypeElements pRefDataType;
	private final TypeElementElements pTypeElement;
	private final CompositeDataTypeElementElements pCompositeDataTypeElement;
	private final RefDataTypeElementElements pRefDataTypeElement;
	private final LidlInterfaceElements pLidlInterface;
	private final LidlInterfaceTypeElements pLidlInterfaceType;
	private final InterfaceElementElements pInterfaceElement;
	private final AtomInterfaceTypeElementElements pAtomInterfaceTypeElement;
	private final CompositeInterfaceTypeElementElements pCompositeInterfaceTypeElement;
	private final RefInterfaceTypeElementElements pRefInterfaceTypeElement;
	private final AtomInterfaceTypeElements pAtomInterfaceType;
	private final CompositeInterfaceTypeElements pCompositeInterfaceType;
	private final RefInterfaceTypeElements pRefInterfaceType;
	private final DataDirectionElements eDataDirection;
	private final LidlInteractionElements pLidlInteraction;
	private final LidlInteractionIDElements pLidlInteractionID;
	private final IDPartElements pIDPart;
	private final LidlParameterElements pLidlParameter;
	private final LidlTextElements pLidlText;
	private final LidlExpressionElements pLidlExpression;
	private final LidlCallExpressionElements pLidlCallExpression;
	private final CallPartElements pCallPart;
	private final LidlTerminalExpressionElements pLidlTerminalExpression;
	private final LidlArrayElements pLidlArray;
	private final LidlArrayItemElements pLidlArrayItem;
	private final LidlSymbolElements pLidlSymbol;
	private final LidlCompositionElementElements pLidlCompositionElement;
	private final LidlCompositionElements pLidlComposition;
	private final TerminalRule tLIDLIDSYMBOL;
	private final TerminalRule tNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LidlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLidlProgram = new LidlProgramElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pLidlImport = new LidlImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pLidlDefinition = new LidlDefinitionElements();
		this.pLidlData = new LidlDataElements();
		this.pLidlDataType = new LidlDataTypeElements();
		this.pCompositeDataType = new CompositeDataTypeElements();
		this.pRefDataType = new RefDataTypeElements();
		this.pTypeElement = new TypeElementElements();
		this.pCompositeDataTypeElement = new CompositeDataTypeElementElements();
		this.pRefDataTypeElement = new RefDataTypeElementElements();
		this.pLidlInterface = new LidlInterfaceElements();
		this.pLidlInterfaceType = new LidlInterfaceTypeElements();
		this.pInterfaceElement = new InterfaceElementElements();
		this.pAtomInterfaceTypeElement = new AtomInterfaceTypeElementElements();
		this.pCompositeInterfaceTypeElement = new CompositeInterfaceTypeElementElements();
		this.pRefInterfaceTypeElement = new RefInterfaceTypeElementElements();
		this.pAtomInterfaceType = new AtomInterfaceTypeElements();
		this.pCompositeInterfaceType = new CompositeInterfaceTypeElements();
		this.pRefInterfaceType = new RefInterfaceTypeElements();
		this.eDataDirection = new DataDirectionElements();
		this.pLidlInteraction = new LidlInteractionElements();
		this.pLidlInteractionID = new LidlInteractionIDElements();
		this.pIDPart = new IDPartElements();
		this.pLidlParameter = new LidlParameterElements();
		this.pLidlText = new LidlTextElements();
		this.pLidlExpression = new LidlExpressionElements();
		this.pLidlCallExpression = new LidlCallExpressionElements();
		this.pCallPart = new CallPartElements();
		this.pLidlTerminalExpression = new LidlTerminalExpressionElements();
		this.pLidlArray = new LidlArrayElements();
		this.pLidlArrayItem = new LidlArrayItemElements();
		this.pLidlSymbol = new LidlSymbolElements();
		this.pLidlCompositionElement = new LidlCompositionElementElements();
		this.pLidlComposition = new LidlCompositionElements();
		this.tLIDLIDSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.LIDLIDSYMBOL");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "lab.buaa.software.lidl.Lidl.NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("lab.buaa.software.lidl.Lidl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LidlProgram returns LidlProgram:
	//    (pack?='package' name=QualifiedName ';')?
	//    imports+=LidlImport*
	//    definitions+=LidlDefinition*;
	public LidlProgramElements getLidlProgramAccess() {
		return pLidlProgram;
	}
	
	public ParserRule getLidlProgramRule() {
		return getLidlProgramAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//LidlImport:
	//    'import' importedNamespace=QualifiedNameWithWildcard ';';
	public LidlImportElements getLidlImportAccess() {
		return pLidlImport;
	}
	
	public ParserRule getLidlImportRule() {
		return getLidlImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//    QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//LidlDefinition returns LidlDefinition:
	//    LidlData | LidlInterface | LidlInteraction;
	public LidlDefinitionElements getLidlDefinitionAccess() {
		return pLidlDefinition;
	}
	
	public ParserRule getLidlDefinitionRule() {
		return getLidlDefinitionAccess().getRule();
	}
	
	//LidlData returns LidlData:
	//    'data' name=ID
	//    (nested?='with' nestedDef+=LidlData+)?
	//    'is'
	//    (definition=LidlDataType | defined?='Undefined');
	public LidlDataElements getLidlDataAccess() {
		return pLidlData;
	}
	
	public ParserRule getLidlDataRule() {
		return getLidlDataAccess().getRule();
	}
	
	//LidlDataType returns LidlDataType:
	//    CompositeDataType | RefDataType;
	public LidlDataTypeElements getLidlDataTypeAccess() {
		return pLidlDataType;
	}
	
	public ParserRule getLidlDataTypeRule() {
		return getLidlDataTypeAccess().getRule();
	}
	
	//CompositeDataType returns LidlDataType:
	//    {CompositeDataType} '{'
	//    items+=CompositeDataTypeElement (',' items+=CompositeDataTypeElement)*
	//    '}';
	public CompositeDataTypeElements getCompositeDataTypeAccess() {
		return pCompositeDataType;
	}
	
	public ParserRule getCompositeDataTypeRule() {
		return getCompositeDataTypeAccess().getRule();
	}
	
	//RefDataType returns LidlDataType:
	//    {RefDataType} items+=RefDataTypeElement;
	public RefDataTypeElements getRefDataTypeAccess() {
		return pRefDataType;
	}
	
	public ParserRule getRefDataTypeRule() {
		return getRefDataTypeAccess().getRule();
	}
	
	//TypeElement returns TypeElement:
	//    CompositeDataTypeElement | RefDataTypeElement;
	public TypeElementElements getTypeElementAccess() {
		return pTypeElement;
	}
	
	public ParserRule getTypeElementRule() {
		return getTypeElementAccess().getRule();
	}
	
	//CompositeDataTypeElement returns TypeElement:
	//    {CompositeDataTypeElement} name=ID ':'
	//    (type=[LidlData|QualifiedName] |
	//    isArray?='[' type=[LidlData|QualifiedName] ']');
	public CompositeDataTypeElementElements getCompositeDataTypeElementAccess() {
		return pCompositeDataTypeElement;
	}
	
	public ParserRule getCompositeDataTypeElementRule() {
		return getCompositeDataTypeElementAccess().getRule();
	}
	
	//RefDataTypeElement returns TypeElement:
	//    {RefDataTypeElement}
	//    type=[LidlData|QualifiedName] |
	//    isArray?='[' type=[LidlData|QualifiedName] ']';
	public RefDataTypeElementElements getRefDataTypeElementAccess() {
		return pRefDataTypeElement;
	}
	
	public ParserRule getRefDataTypeElementRule() {
		return getRefDataTypeElementAccess().getRule();
	}
	
	//LidlInterface returns LidlInterface:
	//    'interface' name=ID
	//    (nested?='with' nestedDef+=LidlInterface+)?
	//    'is'
	//    (definition=LidlInterfaceType | defined?='Undefined');
	public LidlInterfaceElements getLidlInterfaceAccess() {
		return pLidlInterface;
	}
	
	public ParserRule getLidlInterfaceRule() {
		return getLidlInterfaceAccess().getRule();
	}
	
	//LidlInterfaceType returns LidlInterfaceType:
	//    (AtomInterfaceType) | (CompositeInterfaceType) | (RefInterfaceType (conjugate?='\'')?);
	public LidlInterfaceTypeElements getLidlInterfaceTypeAccess() {
		return pLidlInterfaceType;
	}
	
	public ParserRule getLidlInterfaceTypeRule() {
		return getLidlInterfaceTypeAccess().getRule();
	}
	
	//InterfaceElement returns InterfaceElement:
	//    AtomInterfaceTypeElement | CompositeInterfaceTypeElement | RefInterfaceTypeElement;
	public InterfaceElementElements getInterfaceElementAccess() {
		return pInterfaceElement;
	}
	
	public ParserRule getInterfaceElementRule() {
		return getInterfaceElementAccess().getRule();
	}
	
	//AtomInterfaceTypeElement returns InterfaceElement:
	//    {AtomInterfaceTypeElement} type=[LidlData|QualifiedName] direction=DataDirection;
	public AtomInterfaceTypeElementElements getAtomInterfaceTypeElementAccess() {
		return pAtomInterfaceTypeElement;
	}
	
	public ParserRule getAtomInterfaceTypeElementRule() {
		return getAtomInterfaceTypeElementAccess().getRule();
	}
	
	//CompositeInterfaceTypeElement returns InterfaceElement:
	//    {CompositeInterfaceTypeElement} name=ID ':' (type=[LidlData|QualifiedName] direction=DataDirection |
	//    type=[LidlInterface|QualifiedName]);
	public CompositeInterfaceTypeElementElements getCompositeInterfaceTypeElementAccess() {
		return pCompositeInterfaceTypeElement;
	}
	
	public ParserRule getCompositeInterfaceTypeElementRule() {
		return getCompositeInterfaceTypeElementAccess().getRule();
	}
	
	//RefInterfaceTypeElement returns InterfaceElement:
	//    {RefInterfaceTypeElement} type=[LidlInterface|QualifiedName];
	public RefInterfaceTypeElementElements getRefInterfaceTypeElementAccess() {
		return pRefInterfaceTypeElement;
	}
	
	public ParserRule getRefInterfaceTypeElementRule() {
		return getRefInterfaceTypeElementAccess().getRule();
	}
	
	//AtomInterfaceType returns LidlInterfaceType:
	//    {AtomInterfaceType} items=AtomInterfaceTypeElement;
	public AtomInterfaceTypeElements getAtomInterfaceTypeAccess() {
		return pAtomInterfaceType;
	}
	
	public ParserRule getAtomInterfaceTypeRule() {
		return getAtomInterfaceTypeAccess().getRule();
	}
	
	//CompositeInterfaceType returns LidlInterfaceType:
	//    {CompositeInterfaceType} '{'
	//    items+=CompositeInterfaceTypeElement (',' items+=CompositeInterfaceTypeElement)*
	//    '}';
	public CompositeInterfaceTypeElements getCompositeInterfaceTypeAccess() {
		return pCompositeInterfaceType;
	}
	
	public ParserRule getCompositeInterfaceTypeRule() {
		return getCompositeInterfaceTypeAccess().getRule();
	}
	
	//RefInterfaceType returns LidlInterfaceType:
	//    {RefInterfaceType} items=RefInterfaceTypeElement;
	public RefInterfaceTypeElements getRefInterfaceTypeAccess() {
		return pRefInterfaceType;
	}
	
	public ParserRule getRefInterfaceTypeRule() {
		return getRefInterfaceTypeAccess().getRule();
	}
	
	//enum DataDirection:
	//    IN='in' | OUT='out';
	public DataDirectionElements getDataDirectionAccess() {
		return eDataDirection;
	}
	
	public EnumRule getDataDirectionRule() {
		return getDataDirectionAccess().getRule();
	}
	
	//LidlInteraction returns LidlInteraction:
	//    'interaction'
	//    id=LidlInteractionID ':' interface=LidlInterfaceType
	//    (nested?='with' nestedDef+=LidlInteraction+)?
	//    'is'
	//    '('
	//    definition=LidlExpression
	//    ')';
	public LidlInteractionElements getLidlInteractionAccess() {
		return pLidlInteraction;
	}
	
	public ParserRule getLidlInteractionRule() {
		return getLidlInteractionAccess().getRule();
	}
	
	//LidlInteractionID returns LidlInteractionID:
	//    '(' items+=IDPart+ ')';
	public LidlInteractionIDElements getLidlInteractionIDAccess() {
		return pLidlInteractionID;
	}
	
	public ParserRule getLidlInteractionIDRule() {
		return getLidlInteractionIDAccess().getRule();
	}
	
	//IDPart returns IDPart:
	//    LidlText | LidlParameter;
	public IDPartElements getIDPartAccess() {
		return pIDPart;
	}
	
	public ParserRule getIDPartRule() {
		return getIDPartAccess().getRule();
	}
	
	//LidlParameter returns IDPart:
	//    {LidlParameter} '(' name=ID ':' interface=LidlInterfaceType ')';
	public LidlParameterElements getLidlParameterAccess() {
		return pLidlParameter;
	}
	
	public ParserRule getLidlParameterRule() {
		return getLidlParameterAccess().getRule();
	}
	
	//LidlText returns IDPart:
	//    {LidlText} text=(ID | LIDLIDSYMBOL);
	public LidlTextElements getLidlTextAccess() {
		return pLidlText;
	}
	
	public ParserRule getLidlTextRule() {
		return getLidlTextAccess().getRule();
	}
	
	//LidlExpression returns LidlExpresson:
	//    LidlCallExpression | LidlTerminalExpression | LidlArray;
	public LidlExpressionElements getLidlExpressionAccess() {
		return pLidlExpression;
	}
	
	public ParserRule getLidlExpressionRule() {
		return getLidlExpressionAccess().getRule();
	}
	
	//LidlCallExpression returns LidlExpression:
	//    {LidlCallExpression} items+=CallPart+;
	public LidlCallExpressionElements getLidlCallExpressionAccess() {
		return pLidlCallExpression;
	}
	
	public ParserRule getLidlCallExpressionRule() {
		return getLidlCallExpressionAccess().getRule();
	}
	
	//CallPart returns CallPart:
	//    {TextCallPart} text=(ID | LIDLIDSYMBOL | ',' | '.') | {ParamCallPart} '(' param=LidlExpression ')';
	public CallPartElements getCallPartAccess() {
		return pCallPart;
	}
	
	public ParserRule getCallPartRule() {
		return getCallPartAccess().getRule();
	}
	
	//LidlTerminalExpression returns LidlExpression:
	//    {LidlStringConstant} value=STRING |
	//    {LidlNumberConstant} value=NUMBER |
	//    {LidlBoolConstant} value=('true' | 'false') |
	//    {LidlAvtivationConstant} value=('active' | 'inactive') |
	//    {LidlComposition} body=LidlComposition
	//;
	public LidlTerminalExpressionElements getLidlTerminalExpressionAccess() {
		return pLidlTerminalExpression;
	}
	
	public ParserRule getLidlTerminalExpressionRule() {
		return getLidlTerminalExpressionAccess().getRule();
	}
	
	//LidlArray returns LidlExpression:
	//    {LidlExpression} '[' (item+=LidlArrayItem (',' item+=LidlArrayItem)*)* ']';
	public LidlArrayElements getLidlArrayAccess() {
		return pLidlArray;
	}
	
	public ParserRule getLidlArrayRule() {
		return getLidlArrayAccess().getRule();
	}
	
	//LidlArrayItem:
	//    '(' value=LidlExpression ')';
	public LidlArrayItemElements getLidlArrayItemAccess() {
		return pLidlArrayItem;
	}
	
	public ParserRule getLidlArrayItemRule() {
		return getLidlArrayItemAccess().getRule();
	}
	
	//LidlSymbol:
	//    LidlParameter | LidlCompositionElement | CompositeInterfaceTypeElement;
	public LidlSymbolElements getLidlSymbolAccess() {
		return pLidlSymbol;
	}
	
	public ParserRule getLidlSymbolRule() {
		return getLidlSymbolAccess().getRule();
	}
	
	//LidlCompositionElement:
	//    (param=ID) ':' '(' value=LidlExpression ')';
	public LidlCompositionElementElements getLidlCompositionElementAccess() {
		return pLidlCompositionElement;
	}
	
	public ParserRule getLidlCompositionElementRule() {
		return getLidlCompositionElementAccess().getRule();
	}
	
	//LidlComposition returns LidlExpression:
	//    '{'
	//    items+=LidlCompositionElement (',' items+=LidlCompositionElement)*
	//    '}';
	public LidlCompositionElements getLidlCompositionAccess() {
		return pLidlComposition;
	}
	
	public ParserRule getLidlCompositionRule() {
		return getLidlCompositionAccess().getRule();
	}
	
	//terminal LIDLIDSYMBOL:
	//    ('?' | '!' | '+' | '-' | '*' | '/' | '\\' | '=' | '@' | '`' | '~' | '%' | '^' | '&' | '_' | '|' | '\'' | '\"' | '<'
	//    | '>')+;
	public TerminalRule getLIDLIDSYMBOLRule() {
		return tLIDLIDSYMBOL;
	}
	
	//terminal NUMBER:
	//    INT ('.' INT)?;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
