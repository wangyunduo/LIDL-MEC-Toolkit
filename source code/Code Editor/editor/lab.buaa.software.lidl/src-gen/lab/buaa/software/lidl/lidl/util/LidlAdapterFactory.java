/**
 * generated by Xtext 2.25.0
 */
package lab.buaa.software.lidl.lidl.util;

import lab.buaa.software.lidl.lidl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see lab.buaa.software.lidl.lidl.LidlPackage
 * @generated
 */
public class LidlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LidlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LidlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LidlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LidlSwitch<Adapter> modelSwitch =
    new LidlSwitch<Adapter>()
    {
      @Override
      public Adapter caseLidlProgram(LidlProgram object)
      {
        return createLidlProgramAdapter();
      }
      @Override
      public Adapter caseLidlImport(LidlImport object)
      {
        return createLidlImportAdapter();
      }
      @Override
      public Adapter caseLidlDefinition(LidlDefinition object)
      {
        return createLidlDefinitionAdapter();
      }
      @Override
      public Adapter caseLidlData(LidlData object)
      {
        return createLidlDataAdapter();
      }
      @Override
      public Adapter caseLidlDataType(LidlDataType object)
      {
        return createLidlDataTypeAdapter();
      }
      @Override
      public Adapter caseTypeElement(TypeElement object)
      {
        return createTypeElementAdapter();
      }
      @Override
      public Adapter caseLidlInterface(LidlInterface object)
      {
        return createLidlInterfaceAdapter();
      }
      @Override
      public Adapter caseLidlInterfaceType(LidlInterfaceType object)
      {
        return createLidlInterfaceTypeAdapter();
      }
      @Override
      public Adapter caseInterfaceElement(InterfaceElement object)
      {
        return createInterfaceElementAdapter();
      }
      @Override
      public Adapter caseLidlInteraction(LidlInteraction object)
      {
        return createLidlInteractionAdapter();
      }
      @Override
      public Adapter caseLidlInteractionID(LidlInteractionID object)
      {
        return createLidlInteractionIDAdapter();
      }
      @Override
      public Adapter caseIDPart(IDPart object)
      {
        return createIDPartAdapter();
      }
      @Override
      public Adapter caseLidlExpresson(LidlExpresson object)
      {
        return createLidlExpressonAdapter();
      }
      @Override
      public Adapter caseLidlExpression(LidlExpression object)
      {
        return createLidlExpressionAdapter();
      }
      @Override
      public Adapter caseCallPart(CallPart object)
      {
        return createCallPartAdapter();
      }
      @Override
      public Adapter caseLidlArrayItem(LidlArrayItem object)
      {
        return createLidlArrayItemAdapter();
      }
      @Override
      public Adapter caseLidlSymbol(LidlSymbol object)
      {
        return createLidlSymbolAdapter();
      }
      @Override
      public Adapter caseLidlCompositionElement(LidlCompositionElement object)
      {
        return createLidlCompositionElementAdapter();
      }
      @Override
      public Adapter caseCompositeDataType(CompositeDataType object)
      {
        return createCompositeDataTypeAdapter();
      }
      @Override
      public Adapter caseRefDataType(RefDataType object)
      {
        return createRefDataTypeAdapter();
      }
      @Override
      public Adapter caseCompositeDataTypeElement(CompositeDataTypeElement object)
      {
        return createCompositeDataTypeElementAdapter();
      }
      @Override
      public Adapter caseRefDataTypeElement(RefDataTypeElement object)
      {
        return createRefDataTypeElementAdapter();
      }
      @Override
      public Adapter caseAtomInterfaceTypeElement(AtomInterfaceTypeElement object)
      {
        return createAtomInterfaceTypeElementAdapter();
      }
      @Override
      public Adapter caseCompositeInterfaceTypeElement(CompositeInterfaceTypeElement object)
      {
        return createCompositeInterfaceTypeElementAdapter();
      }
      @Override
      public Adapter caseRefInterfaceTypeElement(RefInterfaceTypeElement object)
      {
        return createRefInterfaceTypeElementAdapter();
      }
      @Override
      public Adapter caseAtomInterfaceType(AtomInterfaceType object)
      {
        return createAtomInterfaceTypeAdapter();
      }
      @Override
      public Adapter caseCompositeInterfaceType(CompositeInterfaceType object)
      {
        return createCompositeInterfaceTypeAdapter();
      }
      @Override
      public Adapter caseRefInterfaceType(RefInterfaceType object)
      {
        return createRefInterfaceTypeAdapter();
      }
      @Override
      public Adapter caseLidlParameter(LidlParameter object)
      {
        return createLidlParameterAdapter();
      }
      @Override
      public Adapter caseLidlText(LidlText object)
      {
        return createLidlTextAdapter();
      }
      @Override
      public Adapter caseLidlCallExpression(LidlCallExpression object)
      {
        return createLidlCallExpressionAdapter();
      }
      @Override
      public Adapter caseTextCallPart(TextCallPart object)
      {
        return createTextCallPartAdapter();
      }
      @Override
      public Adapter caseParamCallPart(ParamCallPart object)
      {
        return createParamCallPartAdapter();
      }
      @Override
      public Adapter caseLidlStringConstant(LidlStringConstant object)
      {
        return createLidlStringConstantAdapter();
      }
      @Override
      public Adapter caseLidlNumberConstant(LidlNumberConstant object)
      {
        return createLidlNumberConstantAdapter();
      }
      @Override
      public Adapter caseLidlBoolConstant(LidlBoolConstant object)
      {
        return createLidlBoolConstantAdapter();
      }
      @Override
      public Adapter caseLidlAvtivationConstant(LidlAvtivationConstant object)
      {
        return createLidlAvtivationConstantAdapter();
      }
      @Override
      public Adapter caseLidlComposition(LidlComposition object)
      {
        return createLidlCompositionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlProgram <em>Program</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlProgram
   * @generated
   */
  public Adapter createLidlProgramAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlImport <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlImport
   * @generated
   */
  public Adapter createLidlImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlDefinition <em>Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlDefinition
   * @generated
   */
  public Adapter createLidlDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlData <em>Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlData
   * @generated
   */
  public Adapter createLidlDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlDataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlDataType
   * @generated
   */
  public Adapter createLidlDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.TypeElement <em>Type Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.TypeElement
   * @generated
   */
  public Adapter createTypeElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlInterface <em>Interface</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlInterface
   * @generated
   */
  public Adapter createLidlInterfaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlInterfaceType <em>Interface Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlInterfaceType
   * @generated
   */
  public Adapter createLidlInterfaceTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.InterfaceElement <em>Interface Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.InterfaceElement
   * @generated
   */
  public Adapter createInterfaceElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlInteraction <em>Interaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlInteraction
   * @generated
   */
  public Adapter createLidlInteractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlInteractionID <em>Interaction ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlInteractionID
   * @generated
   */
  public Adapter createLidlInteractionIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.IDPart <em>ID Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.IDPart
   * @generated
   */
  public Adapter createIDPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlExpresson <em>Expresson</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlExpresson
   * @generated
   */
  public Adapter createLidlExpressonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlExpression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlExpression
   * @generated
   */
  public Adapter createLidlExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.CallPart <em>Call Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.CallPart
   * @generated
   */
  public Adapter createCallPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlArrayItem <em>Array Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlArrayItem
   * @generated
   */
  public Adapter createLidlArrayItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlSymbol <em>Symbol</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlSymbol
   * @generated
   */
  public Adapter createLidlSymbolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlCompositionElement <em>Composition Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlCompositionElement
   * @generated
   */
  public Adapter createLidlCompositionElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.CompositeDataType <em>Composite Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.CompositeDataType
   * @generated
   */
  public Adapter createCompositeDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.RefDataType <em>Ref Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.RefDataType
   * @generated
   */
  public Adapter createRefDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.CompositeDataTypeElement <em>Composite Data Type Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.CompositeDataTypeElement
   * @generated
   */
  public Adapter createCompositeDataTypeElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.RefDataTypeElement <em>Ref Data Type Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.RefDataTypeElement
   * @generated
   */
  public Adapter createRefDataTypeElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.AtomInterfaceTypeElement <em>Atom Interface Type Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.AtomInterfaceTypeElement
   * @generated
   */
  public Adapter createAtomInterfaceTypeElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.CompositeInterfaceTypeElement <em>Composite Interface Type Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.CompositeInterfaceTypeElement
   * @generated
   */
  public Adapter createCompositeInterfaceTypeElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.RefInterfaceTypeElement <em>Ref Interface Type Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.RefInterfaceTypeElement
   * @generated
   */
  public Adapter createRefInterfaceTypeElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.AtomInterfaceType <em>Atom Interface Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.AtomInterfaceType
   * @generated
   */
  public Adapter createAtomInterfaceTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.CompositeInterfaceType <em>Composite Interface Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.CompositeInterfaceType
   * @generated
   */
  public Adapter createCompositeInterfaceTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.RefInterfaceType <em>Ref Interface Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.RefInterfaceType
   * @generated
   */
  public Adapter createRefInterfaceTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlParameter <em>Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlParameter
   * @generated
   */
  public Adapter createLidlParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlText <em>Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlText
   * @generated
   */
  public Adapter createLidlTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlCallExpression <em>Call Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlCallExpression
   * @generated
   */
  public Adapter createLidlCallExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.TextCallPart <em>Text Call Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.TextCallPart
   * @generated
   */
  public Adapter createTextCallPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.ParamCallPart <em>Param Call Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.ParamCallPart
   * @generated
   */
  public Adapter createParamCallPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlStringConstant <em>String Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlStringConstant
   * @generated
   */
  public Adapter createLidlStringConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlNumberConstant <em>Number Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlNumberConstant
   * @generated
   */
  public Adapter createLidlNumberConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlBoolConstant <em>Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlBoolConstant
   * @generated
   */
  public Adapter createLidlBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlAvtivationConstant <em>Avtivation Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlAvtivationConstant
   * @generated
   */
  public Adapter createLidlAvtivationConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lab.buaa.software.lidl.lidl.LidlComposition <em>Composition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lab.buaa.software.lidl.lidl.LidlComposition
   * @generated
   */
  public Adapter createLidlCompositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LidlAdapterFactory
