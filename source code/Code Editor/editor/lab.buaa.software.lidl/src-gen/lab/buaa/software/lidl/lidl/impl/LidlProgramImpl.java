/**
 * generated by Xtext 2.25.0
 */
package lab.buaa.software.lidl.lidl.impl;

import java.util.Collection;

import lab.buaa.software.lidl.lidl.LidlDefinition;
import lab.buaa.software.lidl.lidl.LidlImport;
import lab.buaa.software.lidl.lidl.LidlPackage;
import lab.buaa.software.lidl.lidl.LidlProgram;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lab.buaa.software.lidl.lidl.impl.LidlProgramImpl#isPack <em>Pack</em>}</li>
 *   <li>{@link lab.buaa.software.lidl.lidl.impl.LidlProgramImpl#getName <em>Name</em>}</li>
 *   <li>{@link lab.buaa.software.lidl.lidl.impl.LidlProgramImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link lab.buaa.software.lidl.lidl.impl.LidlProgramImpl#getDefinitions <em>Definitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LidlProgramImpl extends MinimalEObjectImpl.Container implements LidlProgram
{
  /**
   * The default value of the '{@link #isPack() <em>Pack</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPack()
   * @generated
   * @ordered
   */
  protected static final boolean PACK_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPack() <em>Pack</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPack()
   * @generated
   * @ordered
   */
  protected boolean pack = PACK_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<LidlImport> imports;

  /**
   * The cached value of the '{@link #getDefinitions() <em>Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinitions()
   * @generated
   * @ordered
   */
  protected EList<LidlDefinition> definitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LidlProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LidlPackage.Literals.LIDL_PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPack()
  {
    return pack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPack(boolean newPack)
  {
    boolean oldPack = pack;
    pack = newPack;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LidlPackage.LIDL_PROGRAM__PACK, oldPack, pack));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LidlPackage.LIDL_PROGRAM__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LidlImport> getImports()
  {
    if (imports == null)
    {
      imports = new EObjectContainmentEList<LidlImport>(LidlImport.class, this, LidlPackage.LIDL_PROGRAM__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LidlDefinition> getDefinitions()
  {
    if (definitions == null)
    {
      definitions = new EObjectContainmentEList<LidlDefinition>(LidlDefinition.class, this, LidlPackage.LIDL_PROGRAM__DEFINITIONS);
    }
    return definitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_PROGRAM__IMPORTS:
        return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
      case LidlPackage.LIDL_PROGRAM__DEFINITIONS:
        return ((InternalEList<?>)getDefinitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_PROGRAM__PACK:
        return isPack();
      case LidlPackage.LIDL_PROGRAM__NAME:
        return getName();
      case LidlPackage.LIDL_PROGRAM__IMPORTS:
        return getImports();
      case LidlPackage.LIDL_PROGRAM__DEFINITIONS:
        return getDefinitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_PROGRAM__PACK:
        setPack((Boolean)newValue);
        return;
      case LidlPackage.LIDL_PROGRAM__NAME:
        setName((String)newValue);
        return;
      case LidlPackage.LIDL_PROGRAM__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends LidlImport>)newValue);
        return;
      case LidlPackage.LIDL_PROGRAM__DEFINITIONS:
        getDefinitions().clear();
        getDefinitions().addAll((Collection<? extends LidlDefinition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_PROGRAM__PACK:
        setPack(PACK_EDEFAULT);
        return;
      case LidlPackage.LIDL_PROGRAM__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LidlPackage.LIDL_PROGRAM__IMPORTS:
        getImports().clear();
        return;
      case LidlPackage.LIDL_PROGRAM__DEFINITIONS:
        getDefinitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LidlPackage.LIDL_PROGRAM__PACK:
        return pack != PACK_EDEFAULT;
      case LidlPackage.LIDL_PROGRAM__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LidlPackage.LIDL_PROGRAM__IMPORTS:
        return imports != null && !imports.isEmpty();
      case LidlPackage.LIDL_PROGRAM__DEFINITIONS:
        return definitions != null && !definitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (pack: ");
    result.append(pack);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //LidlProgramImpl
