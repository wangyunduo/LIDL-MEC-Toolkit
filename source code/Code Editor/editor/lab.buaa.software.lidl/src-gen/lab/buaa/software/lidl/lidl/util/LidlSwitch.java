/**
 * generated by Xtext 2.25.0
 */
package lab.buaa.software.lidl.lidl.util;

import lab.buaa.software.lidl.lidl.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see lab.buaa.software.lidl.lidl.LidlPackage
 * @generated
 */
public class LidlSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LidlPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LidlSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = LidlPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case LidlPackage.LIDL_PROGRAM:
      {
        LidlProgram lidlProgram = (LidlProgram)theEObject;
        T result = caseLidlProgram(lidlProgram);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_IMPORT:
      {
        LidlImport lidlImport = (LidlImport)theEObject;
        T result = caseLidlImport(lidlImport);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_DEFINITION:
      {
        LidlDefinition lidlDefinition = (LidlDefinition)theEObject;
        T result = caseLidlDefinition(lidlDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_DATA:
      {
        LidlData lidlData = (LidlData)theEObject;
        T result = caseLidlData(lidlData);
        if (result == null) result = caseLidlDefinition(lidlData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_DATA_TYPE:
      {
        LidlDataType lidlDataType = (LidlDataType)theEObject;
        T result = caseLidlDataType(lidlDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.TYPE_ELEMENT:
      {
        TypeElement typeElement = (TypeElement)theEObject;
        T result = caseTypeElement(typeElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_INTERFACE:
      {
        LidlInterface lidlInterface = (LidlInterface)theEObject;
        T result = caseLidlInterface(lidlInterface);
        if (result == null) result = caseLidlDefinition(lidlInterface);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_INTERFACE_TYPE:
      {
        LidlInterfaceType lidlInterfaceType = (LidlInterfaceType)theEObject;
        T result = caseLidlInterfaceType(lidlInterfaceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.INTERFACE_ELEMENT:
      {
        InterfaceElement interfaceElement = (InterfaceElement)theEObject;
        T result = caseInterfaceElement(interfaceElement);
        if (result == null) result = caseLidlSymbol(interfaceElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_INTERACTION:
      {
        LidlInteraction lidlInteraction = (LidlInteraction)theEObject;
        T result = caseLidlInteraction(lidlInteraction);
        if (result == null) result = caseLidlDefinition(lidlInteraction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_INTERACTION_ID:
      {
        LidlInteractionID lidlInteractionID = (LidlInteractionID)theEObject;
        T result = caseLidlInteractionID(lidlInteractionID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.ID_PART:
      {
        IDPart idPart = (IDPart)theEObject;
        T result = caseIDPart(idPart);
        if (result == null) result = caseLidlSymbol(idPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_EXPRESSON:
      {
        LidlExpresson lidlExpresson = (LidlExpresson)theEObject;
        T result = caseLidlExpresson(lidlExpresson);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_EXPRESSION:
      {
        LidlExpression lidlExpression = (LidlExpression)theEObject;
        T result = caseLidlExpression(lidlExpression);
        if (result == null) result = caseLidlExpresson(lidlExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.CALL_PART:
      {
        CallPart callPart = (CallPart)theEObject;
        T result = caseCallPart(callPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_ARRAY_ITEM:
      {
        LidlArrayItem lidlArrayItem = (LidlArrayItem)theEObject;
        T result = caseLidlArrayItem(lidlArrayItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_SYMBOL:
      {
        LidlSymbol lidlSymbol = (LidlSymbol)theEObject;
        T result = caseLidlSymbol(lidlSymbol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_COMPOSITION_ELEMENT:
      {
        LidlCompositionElement lidlCompositionElement = (LidlCompositionElement)theEObject;
        T result = caseLidlCompositionElement(lidlCompositionElement);
        if (result == null) result = caseLidlSymbol(lidlCompositionElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.COMPOSITE_DATA_TYPE:
      {
        CompositeDataType compositeDataType = (CompositeDataType)theEObject;
        T result = caseCompositeDataType(compositeDataType);
        if (result == null) result = caseLidlDataType(compositeDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.REF_DATA_TYPE:
      {
        RefDataType refDataType = (RefDataType)theEObject;
        T result = caseRefDataType(refDataType);
        if (result == null) result = caseLidlDataType(refDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.COMPOSITE_DATA_TYPE_ELEMENT:
      {
        CompositeDataTypeElement compositeDataTypeElement = (CompositeDataTypeElement)theEObject;
        T result = caseCompositeDataTypeElement(compositeDataTypeElement);
        if (result == null) result = caseTypeElement(compositeDataTypeElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.REF_DATA_TYPE_ELEMENT:
      {
        RefDataTypeElement refDataTypeElement = (RefDataTypeElement)theEObject;
        T result = caseRefDataTypeElement(refDataTypeElement);
        if (result == null) result = caseTypeElement(refDataTypeElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.ATOM_INTERFACE_TYPE_ELEMENT:
      {
        AtomInterfaceTypeElement atomInterfaceTypeElement = (AtomInterfaceTypeElement)theEObject;
        T result = caseAtomInterfaceTypeElement(atomInterfaceTypeElement);
        if (result == null) result = caseInterfaceElement(atomInterfaceTypeElement);
        if (result == null) result = caseLidlSymbol(atomInterfaceTypeElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.COMPOSITE_INTERFACE_TYPE_ELEMENT:
      {
        CompositeInterfaceTypeElement compositeInterfaceTypeElement = (CompositeInterfaceTypeElement)theEObject;
        T result = caseCompositeInterfaceTypeElement(compositeInterfaceTypeElement);
        if (result == null) result = caseInterfaceElement(compositeInterfaceTypeElement);
        if (result == null) result = caseLidlSymbol(compositeInterfaceTypeElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.REF_INTERFACE_TYPE_ELEMENT:
      {
        RefInterfaceTypeElement refInterfaceTypeElement = (RefInterfaceTypeElement)theEObject;
        T result = caseRefInterfaceTypeElement(refInterfaceTypeElement);
        if (result == null) result = caseInterfaceElement(refInterfaceTypeElement);
        if (result == null) result = caseLidlSymbol(refInterfaceTypeElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.ATOM_INTERFACE_TYPE:
      {
        AtomInterfaceType atomInterfaceType = (AtomInterfaceType)theEObject;
        T result = caseAtomInterfaceType(atomInterfaceType);
        if (result == null) result = caseLidlInterfaceType(atomInterfaceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.COMPOSITE_INTERFACE_TYPE:
      {
        CompositeInterfaceType compositeInterfaceType = (CompositeInterfaceType)theEObject;
        T result = caseCompositeInterfaceType(compositeInterfaceType);
        if (result == null) result = caseLidlInterfaceType(compositeInterfaceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.REF_INTERFACE_TYPE:
      {
        RefInterfaceType refInterfaceType = (RefInterfaceType)theEObject;
        T result = caseRefInterfaceType(refInterfaceType);
        if (result == null) result = caseLidlInterfaceType(refInterfaceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_PARAMETER:
      {
        LidlParameter lidlParameter = (LidlParameter)theEObject;
        T result = caseLidlParameter(lidlParameter);
        if (result == null) result = caseIDPart(lidlParameter);
        if (result == null) result = caseLidlSymbol(lidlParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_TEXT:
      {
        LidlText lidlText = (LidlText)theEObject;
        T result = caseLidlText(lidlText);
        if (result == null) result = caseIDPart(lidlText);
        if (result == null) result = caseLidlSymbol(lidlText);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_CALL_EXPRESSION:
      {
        LidlCallExpression lidlCallExpression = (LidlCallExpression)theEObject;
        T result = caseLidlCallExpression(lidlCallExpression);
        if (result == null) result = caseLidlExpression(lidlCallExpression);
        if (result == null) result = caseLidlExpresson(lidlCallExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.TEXT_CALL_PART:
      {
        TextCallPart textCallPart = (TextCallPart)theEObject;
        T result = caseTextCallPart(textCallPart);
        if (result == null) result = caseCallPart(textCallPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.PARAM_CALL_PART:
      {
        ParamCallPart paramCallPart = (ParamCallPart)theEObject;
        T result = caseParamCallPart(paramCallPart);
        if (result == null) result = caseCallPart(paramCallPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_STRING_CONSTANT:
      {
        LidlStringConstant lidlStringConstant = (LidlStringConstant)theEObject;
        T result = caseLidlStringConstant(lidlStringConstant);
        if (result == null) result = caseLidlExpression(lidlStringConstant);
        if (result == null) result = caseLidlExpresson(lidlStringConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_NUMBER_CONSTANT:
      {
        LidlNumberConstant lidlNumberConstant = (LidlNumberConstant)theEObject;
        T result = caseLidlNumberConstant(lidlNumberConstant);
        if (result == null) result = caseLidlExpression(lidlNumberConstant);
        if (result == null) result = caseLidlExpresson(lidlNumberConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_BOOL_CONSTANT:
      {
        LidlBoolConstant lidlBoolConstant = (LidlBoolConstant)theEObject;
        T result = caseLidlBoolConstant(lidlBoolConstant);
        if (result == null) result = caseLidlExpression(lidlBoolConstant);
        if (result == null) result = caseLidlExpresson(lidlBoolConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_AVTIVATION_CONSTANT:
      {
        LidlAvtivationConstant lidlAvtivationConstant = (LidlAvtivationConstant)theEObject;
        T result = caseLidlAvtivationConstant(lidlAvtivationConstant);
        if (result == null) result = caseLidlExpression(lidlAvtivationConstant);
        if (result == null) result = caseLidlExpresson(lidlAvtivationConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LidlPackage.LIDL_COMPOSITION:
      {
        LidlComposition lidlComposition = (LidlComposition)theEObject;
        T result = caseLidlComposition(lidlComposition);
        if (result == null) result = caseLidlExpression(lidlComposition);
        if (result == null) result = caseLidlExpresson(lidlComposition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Program</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Program</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlProgram(LidlProgram object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlImport(LidlImport object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlDefinition(LidlDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlData(LidlData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlDataType(LidlDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeElement(TypeElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlInterface(LidlInterface object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlInterfaceType(LidlInterfaceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceElement(InterfaceElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interaction</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interaction</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlInteraction(LidlInteraction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interaction ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interaction ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlInteractionID(LidlInteractionID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ID Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ID Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIDPart(IDPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expresson</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expresson</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlExpresson(LidlExpresson object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlExpression(LidlExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallPart(CallPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlArrayItem(LidlArrayItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlSymbol(LidlSymbol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlCompositionElement(LidlCompositionElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composite Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composite Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositeDataType(CompositeDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefDataType(RefDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composite Data Type Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composite Data Type Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositeDataTypeElement(CompositeDataTypeElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref Data Type Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref Data Type Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefDataTypeElement(RefDataTypeElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atom Interface Type Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atom Interface Type Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomInterfaceTypeElement(AtomInterfaceTypeElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composite Interface Type Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composite Interface Type Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositeInterfaceTypeElement(CompositeInterfaceTypeElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref Interface Type Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref Interface Type Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefInterfaceTypeElement(RefInterfaceTypeElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atom Interface Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atom Interface Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomInterfaceType(AtomInterfaceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composite Interface Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composite Interface Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompositeInterfaceType(CompositeInterfaceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref Interface Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref Interface Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefInterfaceType(RefInterfaceType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlParameter(LidlParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlText(LidlText object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlCallExpression(LidlCallExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text Call Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text Call Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTextCallPart(TextCallPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Param Call Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Param Call Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParamCallPart(ParamCallPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlStringConstant(LidlStringConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlNumberConstant(LidlNumberConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlBoolConstant(LidlBoolConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Avtivation Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Avtivation Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlAvtivationConstant(LidlAvtivationConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Composition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Composition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLidlComposition(LidlComposition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //LidlSwitch
