/**
 * generated by Xtext 2.25.0
 */
package lab.buaa.software.lidl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import lab.buaa.software.lidl.lidl.AtomInterfaceType;
import lab.buaa.software.lidl.lidl.AtomInterfaceTypeElement;
import lab.buaa.software.lidl.lidl.CompositeDataType;
import lab.buaa.software.lidl.lidl.CompositeDataTypeElement;
import lab.buaa.software.lidl.lidl.CompositeInterfaceType;
import lab.buaa.software.lidl.lidl.IDPart;
import lab.buaa.software.lidl.lidl.InterfaceElement;
import lab.buaa.software.lidl.lidl.LidlData;
import lab.buaa.software.lidl.lidl.LidlDataType;
import lab.buaa.software.lidl.lidl.LidlDefinition;
import lab.buaa.software.lidl.lidl.LidlExpresson;
import lab.buaa.software.lidl.lidl.LidlImport;
import lab.buaa.software.lidl.lidl.LidlInteraction;
import lab.buaa.software.lidl.lidl.LidlInteractionID;
import lab.buaa.software.lidl.lidl.LidlInterface;
import lab.buaa.software.lidl.lidl.LidlInterfaceType;
import lab.buaa.software.lidl.lidl.LidlParameter;
import lab.buaa.software.lidl.lidl.LidlProgram;
import lab.buaa.software.lidl.lidl.RefDataType;
import lab.buaa.software.lidl.lidl.RefDataTypeElement;
import lab.buaa.software.lidl.lidl.RefInterfaceType;
import lab.buaa.software.lidl.lidl.RefInterfaceTypeElement;
import lab.buaa.software.lidl.lidl.TypeElement;
import lab.buaa.software.lidl.services.LidlGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class LidlFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LidlGrammarAccess _lidlGrammarAccess;
  
  /**
   * LidlProgram
   */
  protected void _format(final LidlProgram prog, @Extension final IFormattableDocument document) {
    boolean _isPack = prog.isPack();
    if (_isPack) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.setNewLines(2);
      };
      document.append(document.prepend(this.textRegionExtensions.regionFor(prog).keyword(";"), _function), _function_1);
    }
    for (int i = 0; (i < (((Object[])Conversions.unwrapArray(prog.getImports(), Object.class)).length - 1)); i++) {
      document.<LidlImport>format(prog.getImports().get(i));
    }
    int _length = ((Object[])Conversions.unwrapArray(prog.getImports(), Object.class)).length;
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      EList<LidlImport> _imports = prog.getImports();
      int _length_1 = ((Object[])Conversions.unwrapArray(prog.getImports(), Object.class)).length;
      int _minus = (_length_1 - 1);
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.setNewLines(2);
      };
      document.<LidlImport>append(_imports.get(_minus), _function_2);
    }
    EList<LidlDefinition> _definitions = prog.getDefinitions();
    for (final LidlDefinition lidlDefinition : _definitions) {
      document.<LidlDefinition>format(lidlDefinition);
    }
  }
  
  /**
   * LidlImport
   */
  protected void _format(final LidlImport li, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(li).keyword(";"), _function), _function_1);
  }
  
  /**
   * LidlData
   */
  protected void _format(final LidlData ld, @Extension final IFormattableDocument document) {
    final ISemanticRegion DATA_KEYWORD = this.textRegionExtensions.regionFor(ld).keyword("data");
    ISemanticRegion _xifexpression = null;
    boolean _isNested = ld.isNested();
    if (_isNested) {
      _xifexpression = this.textRegionExtensions.regionFor(ld).keyword("with");
    } else {
      _xifexpression = null;
    }
    final ISemanticRegion WITH_KEYWORD = _xifexpression;
    final ISemanticRegion IS_KEYWORD = this.textRegionExtensions.regionFor(ld).keyword("is");
    final ISemanticRegion openName = DATA_KEYWORD;
    ISemanticRegion _xifexpression_1 = null;
    boolean _isNested_1 = ld.isNested();
    if (_isNested_1) {
      _xifexpression_1 = WITH_KEYWORD;
    } else {
      _xifexpression_1 = IS_KEYWORD;
    }
    final ISemanticRegion closeName = _xifexpression_1;
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(openName, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(openName, closeName, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(closeName, _function_2);
    boolean _isNested_2 = ld.isNested();
    if (_isNested_2) {
      final ISemanticRegion openNested = WITH_KEYWORD;
      final ISemanticRegion closeNested = IS_KEYWORD;
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.newLine();
      };
      document.append(document.prepend(openNested, _function_3), _function_4);
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(openNested, closeNested, _function_5);
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.noSpace();
        it.newLine();
      };
      document.append(document.prepend(closeNested, _function_6), _function_7);
      EList<LidlData> _nestedDef = ld.getNestedDef();
      for (final LidlData nestedData : _nestedDef) {
        document.<LidlData>format(nestedData);
      }
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(closeName, _function_8);
    }
    document.<LidlDataType>format(ld.getDefinition());
  }
  
  /**
   * CompositeDataType
   */
  protected void _format(final CompositeDataType cdt, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(cdt).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(cdt).keyword("}");
    final List<ISemanticRegion> cols = this.textRegionExtensions.regionFor(cdt).keywords(",");
    int _length = ((Object[])Conversions.unwrapArray(cdt.getItems(), Object.class)).length;
    boolean _notEquals = (_length != 0);
    if (_notEquals) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(document.prepend(open, _function), _function_1);
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_2);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.prepend(close, _function_3);
      EList<TypeElement> _items = cdt.getItems();
      for (final TypeElement item : _items) {
        document.<TypeElement>format(item);
      }
      for (final ISemanticRegion col : cols) {
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(document.prepend(col, _function_4), _function_5);
      }
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(open, _function_6), _function_7);
      EList<TypeElement> _items_1 = cdt.getItems();
      for (final TypeElement item_1 : _items_1) {
        document.<TypeElement>format(item_1);
      }
      for (final ISemanticRegion col_1 : cols) {
        final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.append(document.prepend(col_1, _function_8), _function_9);
      }
      final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.prepend(close, _function_10);
    }
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(close, _function_11);
  }
  
  /**
   * CompositeDataTypeElement
   */
  protected void _format(final CompositeDataTypeElement cdte, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(cdte).keyword(":");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(open, _function), _function_1);
  }
  
  /**
   * RefDataType
   */
  protected void _format(final RefDataType rdt, @Extension final IFormattableDocument document) {
    EList<TypeElement> _items = rdt.getItems();
    for (final TypeElement item : _items) {
      document.<TypeElement>format(item);
    }
  }
  
  /**
   * RefDataTypeElement
   */
  protected void _format(final RefDataTypeElement rdte, @Extension final IFormattableDocument document) {
    final ISemanticRegion end = this.textRegionExtensions.regionFor(rdte).assignment(this._lidlGrammarAccess.getRefDataTypeElementAccess().getTypeAssignment_0_1());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(document.append(document.surround(document.prepend(end, _function), _function_1), _function_2), _function_3);
  }
  
  /**
   * LidlInterface
   */
  protected void _format(final LidlInterface li, @Extension final IFormattableDocument document) {
    final ISemanticRegion INTERFACE_KEYWORD = this.textRegionExtensions.regionFor(li).keyword("interface");
    ISemanticRegion _xifexpression = null;
    boolean _isNested = li.isNested();
    if (_isNested) {
      _xifexpression = this.textRegionExtensions.regionFor(li).keyword("with");
    } else {
      _xifexpression = null;
    }
    final ISemanticRegion WITH_KEYWORD = _xifexpression;
    final ISemanticRegion IS_KEYWORD = this.textRegionExtensions.regionFor(li).keyword("is");
    final ISemanticRegion openName = INTERFACE_KEYWORD;
    ISemanticRegion _xifexpression_1 = null;
    boolean _isNested_1 = li.isNested();
    if (_isNested_1) {
      _xifexpression_1 = WITH_KEYWORD;
    } else {
      _xifexpression_1 = IS_KEYWORD;
    }
    final ISemanticRegion closeName = _xifexpression_1;
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(openName, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(openName, closeName, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(closeName, _function_2);
    boolean _isNested_2 = li.isNested();
    if (_isNested_2) {
      final ISemanticRegion openNested = WITH_KEYWORD;
      final ISemanticRegion closeNested = IS_KEYWORD;
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.newLine();
      };
      document.append(document.prepend(openNested, _function_3), _function_4);
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(openNested, closeNested, _function_5);
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.noSpace();
        it.newLine();
      };
      document.append(document.prepend(closeNested, _function_6), _function_7);
    }
    EList<LidlInterface> _nestedDef = li.getNestedDef();
    for (final LidlInterface nestedInterface : _nestedDef) {
      document.<LidlInterface>format(nestedInterface);
    }
    this.singleLine = false;
    document.<LidlInterfaceType>format(li.getDefinition());
  }
  
  /**
   * LidlInteraction
   */
  protected void _format(final LidlInteraction li, @Extension final IFormattableDocument document) {
    final ISemanticRegion INTERACTION_KEYWORD = this.textRegionExtensions.regionFor(li).keyword("interaction");
    ISemanticRegion _xifexpression = null;
    boolean _isNested = li.isNested();
    if (_isNested) {
      _xifexpression = this.textRegionExtensions.regionFor(li).keyword("with");
    } else {
      _xifexpression = null;
    }
    final ISemanticRegion WITH_KEYWORD = _xifexpression;
    final ISemanticRegion IS_KEYWORD = this.textRegionExtensions.regionFor(li).keyword("is");
    final ISemanticRegion COL_KEYWORD = this.textRegionExtensions.regionFor(li).keyword(":");
    final ISemanticRegion LEFT_KEYWORD = this.textRegionExtensions.regionFor(li).keyword("(");
    final ISemanticRegion RIGHT_KEYWORD = this.textRegionExtensions.regionFor(li).keyword(")");
    final ISemanticRegion openName = INTERACTION_KEYWORD;
    ISemanticRegion _xifexpression_1 = null;
    boolean _isNested_1 = li.isNested();
    if (_isNested_1) {
      _xifexpression_1 = WITH_KEYWORD;
    } else {
      _xifexpression_1 = IS_KEYWORD;
    }
    final ISemanticRegion closeName = _xifexpression_1;
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(openName, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(openName, closeName, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(closeName, _function_2);
    document.<LidlInteractionID>format(li.getId());
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(COL_KEYWORD, _function_3), _function_4);
    this.singleLine = true;
    document.<LidlInterfaceType>format(li.getInterface());
    this.singleLine = false;
    boolean _isNested_2 = li.isNested();
    if (_isNested_2) {
      final ISemanticRegion openNested = WITH_KEYWORD;
      final ISemanticRegion closeNested = IS_KEYWORD;
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.newLine();
      };
      document.append(document.prepend(openNested, _function_5), _function_6);
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(openNested, closeNested, _function_7);
      final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
        it.highPriority();
        it.noSpace();
        it.newLine();
      };
      document.append(document.prepend(closeNested, _function_8), _function_9);
    }
    EList<LidlInteraction> _nestedDef = li.getNestedDef();
    for (final LidlInteraction nestedInteraction : _nestedDef) {
      document.<LidlInteraction>format(nestedInteraction);
    }
    final ISemanticRegion left = LEFT_KEYWORD;
    final ISemanticRegion right = RIGHT_KEYWORD;
    final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(left, _function_10), _function_11);
    final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(left, right, _function_12);
    final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_14 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(document.prepend(right, _function_13), _function_14);
    document.<LidlExpresson>format(li.getDefinition());
  }
  
  protected void _format(final LidlInteractionID liid, @Extension final IFormattableDocument document) {
    EList<IDPart> _items = liid.getItems();
    for (final IDPart part : _items) {
      document.<IDPart>format(part);
    }
  }
  
  protected void _format(final LidlParameter lp, @Extension final IFormattableDocument document) {
    final ISemanticRegion left = this.textRegionExtensions.regionFor(lp).keyword("(");
    final ISemanticRegion right = this.textRegionExtensions.regionFor(lp).keyword(")");
    final ISemanticRegion col = this.textRegionExtensions.regionFor(lp).keyword(":");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(left, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(right, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(col, _function_2), _function_3);
  }
  
  protected boolean singleLine = false;
  
  protected void _format(final AtomInterfaceType ait, @Extension final IFormattableDocument document) {
    document.<InterfaceElement>format(ait.getItems());
  }
  
  protected void _format(final AtomInterfaceTypeElement aite, @Extension final IFormattableDocument document) {
    final ISemanticRegion type = this.textRegionExtensions.regionFor(aite).assignment(this._lidlGrammarAccess.getAtomInterfaceTypeElementAccess().getTypeAssignment_1());
    final ISemanticRegion direction = this.textRegionExtensions.regionFor(aite).assignment(this._lidlGrammarAccess.getAtomInterfaceTypeElementAccess().getDirectionAssignment_2());
    if (this.singleLine) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.surround(type, _function);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.surround(document.prepend(type, _function_1), _function_2);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
        it.setNewLines(2);
      };
      document.append(document.prepend(direction, _function_3), _function_4);
    }
  }
  
  protected void _format(final CompositeInterfaceType cit, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(cit).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(cit).keyword("}");
    final List<ISemanticRegion> coms = this.textRegionExtensions.regionFor(cit).keywords(",");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      if (this.singleLine) {
        it.oneSpace();
      } else {
        it.newLine();
      }
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      if (this.singleLine) {
        it.oneSpace();
      } else {
        it.newLine();
      }
    };
    document.prepend(close, _function_2);
    for (final ISemanticRegion com : coms) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        if (this.singleLine) {
          it.oneSpace();
        } else {
          it.newLine();
        }
      };
      document.append(com, _function_3);
    }
    EList<InterfaceElement> _items = cit.getItems();
    for (final InterfaceElement cite : _items) {
      document.<InterfaceElement>format(cite);
    }
  }
  
  protected void _format(final RefInterfaceType rit, @Extension final IFormattableDocument document) {
    document.<InterfaceElement>format(rit.getItems());
  }
  
  protected void _format(final RefInterfaceTypeElement rite, @Extension final IFormattableDocument document) {
    final ISemanticRegion type = this.textRegionExtensions.regionFor(rite).assignment(this._lidlGrammarAccess.getRefInterfaceTypeElementAccess().getTypeAssignment_1());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      if (this.singleLine) {
        it.oneSpace();
      } else {
        it.newLine();
      }
    };
    document.surround(type, _function);
  }
  
  public void format(final Object aite, final IFormattableDocument document) {
    if (aite instanceof AtomInterfaceTypeElement) {
      _format((AtomInterfaceTypeElement)aite, document);
      return;
    } else if (aite instanceof LidlParameter) {
      _format((LidlParameter)aite, document);
      return;
    } else if (aite instanceof RefInterfaceTypeElement) {
      _format((RefInterfaceTypeElement)aite, document);
      return;
    } else if (aite instanceof XtextResource) {
      _format((XtextResource)aite, document);
      return;
    } else if (aite instanceof AtomInterfaceType) {
      _format((AtomInterfaceType)aite, document);
      return;
    } else if (aite instanceof CompositeDataType) {
      _format((CompositeDataType)aite, document);
      return;
    } else if (aite instanceof CompositeDataTypeElement) {
      _format((CompositeDataTypeElement)aite, document);
      return;
    } else if (aite instanceof CompositeInterfaceType) {
      _format((CompositeInterfaceType)aite, document);
      return;
    } else if (aite instanceof LidlData) {
      _format((LidlData)aite, document);
      return;
    } else if (aite instanceof LidlInteraction) {
      _format((LidlInteraction)aite, document);
      return;
    } else if (aite instanceof LidlInterface) {
      _format((LidlInterface)aite, document);
      return;
    } else if (aite instanceof RefDataType) {
      _format((RefDataType)aite, document);
      return;
    } else if (aite instanceof RefDataTypeElement) {
      _format((RefDataTypeElement)aite, document);
      return;
    } else if (aite instanceof RefInterfaceType) {
      _format((RefInterfaceType)aite, document);
      return;
    } else if (aite instanceof LidlImport) {
      _format((LidlImport)aite, document);
      return;
    } else if (aite instanceof LidlInteractionID) {
      _format((LidlInteractionID)aite, document);
      return;
    } else if (aite instanceof LidlProgram) {
      _format((LidlProgram)aite, document);
      return;
    } else if (aite instanceof EObject) {
      _format((EObject)aite, document);
      return;
    } else if (aite == null) {
      _format((Void)null, document);
      return;
    } else if (aite != null) {
      _format(aite, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(aite, document).toString());
    }
  }
}
